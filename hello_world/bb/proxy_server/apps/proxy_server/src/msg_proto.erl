%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(msg_proto).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("msg_proto.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'Login'() :: #'Login'{}.
-type 'StartEvaluation'() :: #'StartEvaluation'{}.
-type 'StudentId'() :: #'StudentId'{}.
-type 'CreateClassroom'() :: #'CreateClassroom'{}.
-type 'ReportEvaluationScoreReply'() :: #'ReportEvaluationScoreReply'{}.
-type 'GetEvaluationReply'() :: #'GetEvaluationReply'{}.
-type 'StudentInfo'() :: #'StudentInfo'{}.
-type 'GetOnlineStudentReply'() :: #'GetOnlineStudentReply'{}.
-type 'BroadcastMsgPayload'() :: #'BroadcastMsgPayload'{}.
-type 'BroadcastMsg'() :: #'BroadcastMsg'{}.
-type 'GetClassOnlineStudent'() :: #'GetClassOnlineStudent'{}.
-type 'Heartbeat'() :: #'Heartbeat'{}.
-type 'GetClassOnlineStudentReply'() :: #'GetClassOnlineStudentReply'{}.
-type 'GetOnlineStudent'() :: #'GetOnlineStudent'{}.
-type 'ClassIsOver'() :: #'ClassIsOver'{}.
-type 'StartEvaluationAgain'() :: #'StartEvaluationAgain'{}.
-type 'LockScreen'() :: #'LockScreen'{}.
-type 'IsGroupControl'() :: #'IsGroupControl'{}.
-type 'LoginReply'() :: #'LoginReply'{}.
-type 'StartEvaluationReply'() :: #'StartEvaluationReply'{}.
-type 'GetEvaluationScore'() :: #'GetEvaluationScore'{}.
-type 'ReportEvaluationScore'() :: #'ReportEvaluationScore'{}.
-export_type(['Login'/0, 'StartEvaluation'/0, 'StudentId'/0, 'CreateClassroom'/0, 'ReportEvaluationScoreReply'/0, 'GetEvaluationReply'/0, 'StudentInfo'/0, 'GetOnlineStudentReply'/0, 'BroadcastMsgPayload'/0, 'BroadcastMsg'/0, 'GetClassOnlineStudent'/0, 'Heartbeat'/0, 'GetClassOnlineStudentReply'/0, 'GetOnlineStudent'/0, 'ClassIsOver'/0, 'StartEvaluationAgain'/0, 'LockScreen'/0, 'IsGroupControl'/0, 'LoginReply'/0, 'StartEvaluationReply'/0, 'GetEvaluationScore'/0, 'ReportEvaluationScore'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Login'{} -> e_msg_Login(Msg, TrUserData);
      #'StartEvaluation'{} ->
	  e_msg_StartEvaluation(Msg, TrUserData);
      #'StudentId'{} -> e_msg_StudentId(Msg, TrUserData);
      #'CreateClassroom'{} ->
	  e_msg_CreateClassroom(Msg, TrUserData);
      #'ReportEvaluationScoreReply'{} ->
	  e_msg_ReportEvaluationScoreReply(Msg, TrUserData);
      #'GetEvaluationReply'{} ->
	  e_msg_GetEvaluationReply(Msg, TrUserData);
      #'StudentInfo'{} -> e_msg_StudentInfo(Msg, TrUserData);
      #'GetOnlineStudentReply'{} ->
	  e_msg_GetOnlineStudentReply(Msg, TrUserData);
      #'BroadcastMsgPayload'{} ->
	  e_msg_BroadcastMsgPayload(Msg, TrUserData);
      #'BroadcastMsg'{} ->
	  e_msg_BroadcastMsg(Msg, TrUserData);
      #'GetClassOnlineStudent'{} ->
	  e_msg_GetClassOnlineStudent(Msg, TrUserData);
      #'Heartbeat'{} -> e_msg_Heartbeat(Msg, TrUserData);
      #'GetClassOnlineStudentReply'{} ->
	  e_msg_GetClassOnlineStudentReply(Msg, TrUserData);
      #'GetOnlineStudent'{} ->
	  e_msg_GetOnlineStudent(Msg, TrUserData);
      #'ClassIsOver'{} -> e_msg_ClassIsOver(Msg, TrUserData);
      #'StartEvaluationAgain'{} ->
	  e_msg_StartEvaluationAgain(Msg, TrUserData);
      #'LockScreen'{} -> e_msg_LockScreen(Msg, TrUserData);
      #'IsGroupControl'{} ->
	  e_msg_IsGroupControl(Msg, TrUserData);
      #'LoginReply'{} -> e_msg_LoginReply(Msg, TrUserData);
      #'StartEvaluationReply'{} ->
	  e_msg_StartEvaluationReply(Msg, TrUserData);
      #'GetEvaluationScore'{} ->
	  e_msg_GetEvaluationScore(Msg, TrUserData);
      #'ReportEvaluationScore'{} ->
	  e_msg_ReportEvaluationScore(Msg, TrUserData)
    end.



e_msg_Login(Msg, TrUserData) ->
    e_msg_Login(Msg, <<>>, TrUserData).


e_msg_Login(#'Login'{user_id = F1, token = F2}, Bin,
	    TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.

e_msg_StartEvaluation(Msg, TrUserData) ->
    e_msg_StartEvaluation(Msg, <<>>, TrUserData).


e_msg_StartEvaluation(#'StartEvaluation'{teacher_id =
					     F1,
					 curriculum_id = F2,
					 curriculum_step_id = F3,
					 music_name = F4},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_string(TrF4, <<B3/binary, 34>>)
    end.

e_msg_StudentId(Msg, TrUserData) ->
    e_msg_StudentId(Msg, <<>>, TrUserData).


e_msg_StudentId(#'StudentId'{user_id = F1}, Bin,
		TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_CreateClassroom(Msg, TrUserData) ->
    e_msg_CreateClassroom(Msg, <<>>, TrUserData).


e_msg_CreateClassroom(#'CreateClassroom'{teacher_id =
					     F1,
					 students = F2},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_CreateClassroom_students(TrF2, B1, TrUserData)
      end
    end.

e_msg_ReportEvaluationScoreReply(Msg, TrUserData) ->
    e_msg_ReportEvaluationScoreReply(Msg, <<>>, TrUserData).


e_msg_ReportEvaluationScoreReply(#'ReportEvaluationScoreReply'{user_id
								   = F1,
							       score = F2,
							       curriculum_id =
								   F3,
							       curriculum_step_id
								   = F4,
							       music_name = F5,
							       name = F6,
							       url = F7},
				 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 42>>)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_string(TrF6, <<B5/binary, 50>>)
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      e_type_string(TrF7, <<B6/binary, 58>>)
    end.

e_msg_GetEvaluationReply(Msg, TrUserData) ->
    e_msg_GetEvaluationReply(Msg, <<>>, TrUserData).


e_msg_GetEvaluationReply(#'GetEvaluationReply'{score =
						   F1},
			 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GetEvaluationReply_score(TrF1, Bin, TrUserData)
      end
    end.

e_msg_StudentInfo(Msg, TrUserData) ->
    e_msg_StudentInfo(Msg, <<>>, TrUserData).


e_msg_StudentInfo(#'StudentInfo'{user_id = F1,
				 name = F2, url = F3},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>)
    end.

e_msg_GetOnlineStudentReply(Msg, TrUserData) ->
    e_msg_GetOnlineStudentReply(Msg, <<>>, TrUserData).


e_msg_GetOnlineStudentReply(#'GetOnlineStudentReply'{student
							 = F1},
			    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GetOnlineStudentReply_student(TrF1, Bin,
						   TrUserData)
      end
    end.

e_msg_BroadcastMsgPayload(Msg, TrUserData) ->
    e_msg_BroadcastMsgPayload(Msg, <<>>, TrUserData).


e_msg_BroadcastMsgPayload(#'BroadcastMsgPayload'{protocol_id
						     = F1,
						 data = F2, data1 = F3},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bytes(TrF2, <<B1/binary, 18>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_string(TrF3, <<B2/binary, 26>>)
	   end
    end.

e_msg_BroadcastMsg(Msg, TrUserData) ->
    e_msg_BroadcastMsg(Msg, <<>>, TrUserData).


e_msg_BroadcastMsg(#'BroadcastMsg'{teacher_id = F1,
				   payload = F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_mfield_BroadcastMsg_payload(TrF2, <<B1/binary, 18>>,
				    TrUserData)
    end.

e_msg_GetClassOnlineStudent(Msg, TrUserData) ->
    e_msg_GetClassOnlineStudent(Msg, <<>>, TrUserData).


e_msg_GetClassOnlineStudent(#'GetClassOnlineStudent'{school_id
							 = F1,
						     teacher_id = F2},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>)
    end.

e_msg_Heartbeat(Msg, TrUserData) ->
    e_msg_Heartbeat(Msg, <<>>, TrUserData).


e_msg_Heartbeat(#'Heartbeat'{num = F1}, Bin,
		TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_GetClassOnlineStudentReply(Msg, TrUserData) ->
    e_msg_GetClassOnlineStudentReply(Msg, <<>>, TrUserData).


e_msg_GetClassOnlineStudentReply(#'GetClassOnlineStudentReply'{student
								   = F1},
				 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GetClassOnlineStudentReply_student(TrF1, Bin,
							TrUserData)
      end
    end.

e_msg_GetOnlineStudent(Msg, TrUserData) ->
    e_msg_GetOnlineStudent(Msg, <<>>, TrUserData).


e_msg_GetOnlineStudent(#'GetOnlineStudent'{school_id =
					       F1},
		       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_ClassIsOver(Msg, TrUserData) ->
    e_msg_ClassIsOver(Msg, <<>>, TrUserData).


e_msg_ClassIsOver(#'ClassIsOver'{teacher_id = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_StartEvaluationAgain(Msg, TrUserData) ->
    e_msg_StartEvaluationAgain(Msg, <<>>, TrUserData).


e_msg_StartEvaluationAgain(#'StartEvaluationAgain'{evaluation_id
						       = F1,
						   students = F2},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_StartEvaluationAgain_students(TrF2, B1,
						   TrUserData)
      end
    end.

e_msg_LockScreen(Msg, TrUserData) ->
    e_msg_LockScreen(Msg, <<>>, TrUserData).


e_msg_LockScreen(#'LockScreen'{teacher_id = F1,
			       status = F2},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>)
    end.

e_msg_IsGroupControl(Msg, TrUserData) ->
    e_msg_IsGroupControl(Msg, <<>>, TrUserData).


e_msg_IsGroupControl(#'IsGroupControl'{teacher_id = F1,
				       status = F2},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>)
    end.

e_msg_LoginReply(Msg, TrUserData) ->
    e_msg_LoginReply(Msg, <<>>, TrUserData).


e_msg_LoginReply(#'LoginReply'{error_type = F1,
			       msg = F2},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.

e_msg_StartEvaluationReply(Msg, TrUserData) ->
    e_msg_StartEvaluationReply(Msg, <<>>, TrUserData).


e_msg_StartEvaluationReply(#'StartEvaluationReply'{evaluation_id
						       = F1},
			   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_GetEvaluationScore(Msg, TrUserData) ->
    e_msg_GetEvaluationScore(Msg, <<>>, TrUserData).


e_msg_GetEvaluationScore(#'GetEvaluationScore'{evaluation_id
						   = F1},
			 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_ReportEvaluationScore(Msg, TrUserData) ->
    e_msg_ReportEvaluationScore(Msg, <<>>, TrUserData).


e_msg_ReportEvaluationScore(#'ReportEvaluationScore'{user_id
							 = F1,
						     score = F2,
						     curriculum_id = F3,
						     curriculum_step_id = F4,
						     music_name = F5},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_string(TrF5, <<B4/binary, 42>>)
    end.

e_mfield_CreateClassroom_students(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_StudentId(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CreateClassroom_students([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_CreateClassroom_students(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_CreateClassroom_students(Rest, Bin3,
				     TrUserData);
e_field_CreateClassroom_students([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_GetEvaluationReply_score(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_ReportEvaluationScoreReply(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetEvaluationReply_score([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GetEvaluationReply_score(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_GetEvaluationReply_score(Rest, Bin3,
				     TrUserData);
e_field_GetEvaluationReply_score([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_GetOnlineStudentReply_student(Msg, Bin,
				       TrUserData) ->
    SubBin = e_msg_StudentInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetOnlineStudentReply_student([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GetOnlineStudentReply_student(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_GetOnlineStudentReply_student(Rest, Bin3,
					  TrUserData);
e_field_GetOnlineStudentReply_student([], Bin,
				      _TrUserData) ->
    Bin.

e_mfield_BroadcastMsg_payload(Msg, Bin, TrUserData) ->
    SubBin = e_msg_BroadcastMsgPayload(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetClassOnlineStudentReply_student(Msg, Bin,
					    TrUserData) ->
    SubBin = e_msg_StudentInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetClassOnlineStudentReply_student([Elem
					    | Rest],
					   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_GetClassOnlineStudentReply_student(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    e_field_GetClassOnlineStudentReply_student(Rest, Bin3,
					       TrUserData);
e_field_GetClassOnlineStudentReply_student([], Bin,
					   _TrUserData) ->
    Bin.

e_mfield_StartEvaluationAgain_students(Msg, Bin,
				       TrUserData) ->
    SubBin = e_msg_StudentId(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_StartEvaluationAgain_students([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_StartEvaluationAgain_students(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_StartEvaluationAgain_students(Rest, Bin3,
					  TrUserData);
e_field_StartEvaluationAgain_students([], Bin,
				      _TrUserData) ->
    Bin.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Login' -> d_msg_Login(Bin, TrUserData);
      'StartEvaluation' ->
	  d_msg_StartEvaluation(Bin, TrUserData);
      'StudentId' -> d_msg_StudentId(Bin, TrUserData);
      'CreateClassroom' ->
	  d_msg_CreateClassroom(Bin, TrUserData);
      'ReportEvaluationScoreReply' ->
	  d_msg_ReportEvaluationScoreReply(Bin, TrUserData);
      'GetEvaluationReply' ->
	  d_msg_GetEvaluationReply(Bin, TrUserData);
      'StudentInfo' -> d_msg_StudentInfo(Bin, TrUserData);
      'GetOnlineStudentReply' ->
	  d_msg_GetOnlineStudentReply(Bin, TrUserData);
      'BroadcastMsgPayload' ->
	  d_msg_BroadcastMsgPayload(Bin, TrUserData);
      'BroadcastMsg' -> d_msg_BroadcastMsg(Bin, TrUserData);
      'GetClassOnlineStudent' ->
	  d_msg_GetClassOnlineStudent(Bin, TrUserData);
      'Heartbeat' -> d_msg_Heartbeat(Bin, TrUserData);
      'GetClassOnlineStudentReply' ->
	  d_msg_GetClassOnlineStudentReply(Bin, TrUserData);
      'GetOnlineStudent' ->
	  d_msg_GetOnlineStudent(Bin, TrUserData);
      'ClassIsOver' -> d_msg_ClassIsOver(Bin, TrUserData);
      'StartEvaluationAgain' ->
	  d_msg_StartEvaluationAgain(Bin, TrUserData);
      'LockScreen' -> d_msg_LockScreen(Bin, TrUserData);
      'IsGroupControl' ->
	  d_msg_IsGroupControl(Bin, TrUserData);
      'LoginReply' -> d_msg_LoginReply(Bin, TrUserData);
      'StartEvaluationReply' ->
	  d_msg_StartEvaluationReply(Bin, TrUserData);
      'GetEvaluationScore' ->
	  d_msg_GetEvaluationScore(Bin, TrUserData);
      'ReportEvaluationScore' ->
	  d_msg_ReportEvaluationScore(Bin, TrUserData)
    end.



d_msg_Login(Bin, TrUserData) ->
    dfp_read_field_def_Login(Bin, 0, 0,
			     id(undefined, TrUserData),
			     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Login(<<8, Rest/binary>>, Z1, Z2, F1,
			 F2, TrUserData) ->
    d_field_Login_user_id(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Login(<<18, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    d_field_Login_token(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Login(<<>>, 0, 0, F1, F2, _) ->
    #'Login'{user_id = F1, token = F2};
dfp_read_field_def_Login(Other, Z1, Z2, F1, F2,
			 TrUserData) ->
    dg_read_field_def_Login(Other, Z1, Z2, F1, F2,
			    TrUserData).

dg_read_field_def_Login(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Login(Rest, N + 7, X bsl N + Acc, F1,
			    F2, TrUserData);
dg_read_field_def_Login(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Login_user_id(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_Login_token(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Login(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Login(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Login(Rest, 0, 0, F1, F2,
					    TrUserData);
	    5 -> skip_32_Login(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Login(<<>>, 0, 0, F1, F2, _) ->
    #'Login'{user_id = F1, token = F2}.

d_field_Login_user_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_Login_user_id(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_Login_user_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Login(Rest, 0, 0, NewFValue, F2,
			     TrUserData).


d_field_Login_token(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, TrUserData)
    when N < 57 ->
    d_field_Login_token(Rest, N + 7, X bsl N + Acc, F1, F2,
			TrUserData);
d_field_Login_token(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Login(Rest2, 0, 0, F1, NewFValue,
			     TrUserData).


skip_varint_Login(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, TrUserData) ->
    skip_varint_Login(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Login(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F1, F2,
			     TrUserData).


skip_length_delimited_Login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Login(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
skip_length_delimited_Login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Login(Rest2, 0, 0, F1, F2,
			     TrUserData).


skip_32_Login(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	      TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F1, F2,
			     TrUserData).


skip_64_Login(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	      TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F1, F2,
			     TrUserData).


d_msg_StartEvaluation(Bin, TrUserData) ->
    dfp_read_field_def_StartEvaluation(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_StartEvaluation(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_StartEvaluation_teacher_id(Rest, Z1, Z2, F1, F2,
				       F3, F4, TrUserData);
dfp_read_field_def_StartEvaluation(<<16, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_StartEvaluation_curriculum_id(Rest, Z1, Z2, F1,
					  F2, F3, F4, TrUserData);
dfp_read_field_def_StartEvaluation(<<24, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_StartEvaluation_curriculum_step_id(Rest, Z1, Z2,
					       F1, F2, F3, F4, TrUserData);
dfp_read_field_def_StartEvaluation(<<34, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_StartEvaluation_music_name(Rest, Z1, Z2, F1, F2,
				       F3, F4, TrUserData);
dfp_read_field_def_StartEvaluation(<<>>, 0, 0, F1, F2,
				   F3, F4, _) ->
    #'StartEvaluation'{teacher_id = F1, curriculum_id = F2,
		       curriculum_step_id = F3, music_name = F4};
dfp_read_field_def_StartEvaluation(Other, Z1, Z2, F1,
				   F2, F3, F4, TrUserData) ->
    dg_read_field_def_StartEvaluation(Other, Z1, Z2, F1, F2,
				      F3, F4, TrUserData).

dg_read_field_def_StartEvaluation(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StartEvaluation(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4,
				      TrUserData);
dg_read_field_def_StartEvaluation(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_StartEvaluation_teacher_id(Rest, 0, 0, F1, F2,
					     F3, F4, TrUserData);
      16 ->
	  d_field_StartEvaluation_curriculum_id(Rest, 0, 0, F1,
						F2, F3, F4, TrUserData);
      24 ->
	  d_field_StartEvaluation_curriculum_step_id(Rest, 0, 0,
						     F1, F2, F3, F4,
						     TrUserData);
      34 ->
	  d_field_StartEvaluation_music_name(Rest, 0, 0, F1, F2,
					     F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_StartEvaluation(Rest, 0, 0, F1, F2, F3, F4,
					    TrUserData);
	    1 ->
		skip_64_StartEvaluation(Rest, 0, 0, F1, F2, F3, F4,
					TrUserData);
	    2 ->
		skip_length_delimited_StartEvaluation(Rest, 0, 0, F1,
						      F2, F3, F4, TrUserData);
	    5 ->
		skip_32_StartEvaluation(Rest, 0, 0, F1, F2, F3, F4,
					TrUserData)
	  end
    end;
dg_read_field_def_StartEvaluation(<<>>, 0, 0, F1, F2,
				  F3, F4, _) ->
    #'StartEvaluation'{teacher_id = F1, curriculum_id = F2,
		       curriculum_step_id = F3, music_name = F4}.

d_field_StartEvaluation_teacher_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_StartEvaluation_teacher_id(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
d_field_StartEvaluation_teacher_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3, F4, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_StartEvaluation(Rest, 0, 0,
				       NewFValue, F2, F3, F4, TrUserData).


d_field_StartEvaluation_curriculum_id(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_StartEvaluation_curriculum_id(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4,
					  TrUserData);
d_field_StartEvaluation_curriculum_id(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, _, F3, F4, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_StartEvaluation(Rest, 0, 0, F1,
				       NewFValue, F3, F4, TrUserData).


d_field_StartEvaluation_curriculum_step_id(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_StartEvaluation_curriculum_step_id(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       TrUserData);
d_field_StartEvaluation_curriculum_step_id(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, _, F4, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_StartEvaluation(Rest, 0, 0, F1, F2,
				       NewFValue, F4, TrUserData).


d_field_StartEvaluation_music_name(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_StartEvaluation_music_name(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
d_field_StartEvaluation_music_name(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_StartEvaluation(Rest2, 0, 0, F1, F2,
				       F3, NewFValue, TrUserData).


skip_varint_StartEvaluation(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_StartEvaluation(Rest, Z1, Z2, F1, F2, F3,
				F4, TrUserData);
skip_varint_StartEvaluation(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_StartEvaluation(Rest, Z1, Z2, F1, F2,
				       F3, F4, TrUserData).


skip_length_delimited_StartEvaluation(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_StartEvaluation(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4,
					  TrUserData);
skip_length_delimited_StartEvaluation(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StartEvaluation(Rest2, 0, 0, F1, F2,
				       F3, F4, TrUserData).


skip_32_StartEvaluation(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_StartEvaluation(Rest, Z1, Z2, F1, F2,
				       F3, F4, TrUserData).


skip_64_StartEvaluation(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_StartEvaluation(Rest, Z1, Z2, F1, F2,
				       F3, F4, TrUserData).


d_msg_StudentId(Bin, TrUserData) ->
    dfp_read_field_def_StudentId(Bin, 0, 0,
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_StudentId(<<8, Rest/binary>>, Z1, Z2,
			     F1, TrUserData) ->
    d_field_StudentId_user_id(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_StudentId(<<>>, 0, 0, F1, _) ->
    #'StudentId'{user_id = F1};
dfp_read_field_def_StudentId(Other, Z1, Z2, F1,
			     TrUserData) ->
    dg_read_field_def_StudentId(Other, Z1, Z2, F1,
				TrUserData).

dg_read_field_def_StudentId(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StudentId(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
dg_read_field_def_StudentId(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_StudentId_user_id(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_StudentId(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_StudentId(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_StudentId(Rest, 0, 0, F1,
						TrUserData);
	    5 -> skip_32_StudentId(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_StudentId(<<>>, 0, 0, F1, _) ->
    #'StudentId'{user_id = F1}.

d_field_StudentId_user_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 57 ->
    d_field_StudentId_user_id(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
d_field_StudentId_user_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_StudentId(Rest, 0, 0, NewFValue,
				 TrUserData).


skip_varint_StudentId(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    skip_varint_StudentId(Rest, Z1, Z2, F1, TrUserData);
skip_varint_StudentId(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    dfp_read_field_def_StudentId(Rest, Z1, Z2, F1,
				 TrUserData).


skip_length_delimited_StudentId(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_StudentId(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_StudentId(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StudentId(Rest2, 0, 0, F1,
				 TrUserData).


skip_32_StudentId(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_StudentId(Rest, Z1, Z2, F1,
				 TrUserData).


skip_64_StudentId(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_StudentId(Rest, Z1, Z2, F1,
				 TrUserData).


d_msg_CreateClassroom(Bin, TrUserData) ->
    dfp_read_field_def_CreateClassroom(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id([], TrUserData), TrUserData).

dfp_read_field_def_CreateClassroom(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_CreateClassroom_teacher_id(Rest, Z1, Z2, F1, F2,
				       TrUserData);
dfp_read_field_def_CreateClassroom(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_CreateClassroom_students(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_CreateClassroom(<<>>, 0, 0, F1, F2,
				   TrUserData) ->
    #'CreateClassroom'{teacher_id = F1,
		       students = lists_reverse(F2, TrUserData)};
dfp_read_field_def_CreateClassroom(Other, Z1, Z2, F1,
				   F2, TrUserData) ->
    dg_read_field_def_CreateClassroom(Other, Z1, Z2, F1, F2,
				      TrUserData).

dg_read_field_def_CreateClassroom(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CreateClassroom(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_CreateClassroom(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CreateClassroom_teacher_id(Rest, 0, 0, F1, F2,
					     TrUserData);
      18 ->
	  d_field_CreateClassroom_students(Rest, 0, 0, F1, F2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CreateClassroom(Rest, 0, 0, F1, F2,
					    TrUserData);
	    1 ->
		skip_64_CreateClassroom(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_CreateClassroom(Rest, 0, 0, F1,
						      F2, TrUserData);
	    5 ->
		skip_32_CreateClassroom(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_CreateClassroom(<<>>, 0, 0, F1, F2,
				  TrUserData) ->
    #'CreateClassroom'{teacher_id = F1,
		       students = lists_reverse(F2, TrUserData)}.

d_field_CreateClassroom_teacher_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_CreateClassroom_teacher_id(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
d_field_CreateClassroom_teacher_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CreateClassroom(Rest, 0, 0,
				       NewFValue, F2, TrUserData).


d_field_CreateClassroom_students(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_CreateClassroom_students(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_CreateClassroom_students(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_StudentId(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_CreateClassroom(Rest2, 0, 0, F1,
				       cons(NewFValue, F2, TrUserData),
				       TrUserData).


skip_varint_CreateClassroom(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_CreateClassroom(Rest, Z1, Z2, F1, F2,
				TrUserData);
skip_varint_CreateClassroom(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_CreateClassroom(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_length_delimited_CreateClassroom(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_CreateClassroom(Rest, N + 7,
					  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_CreateClassroom(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CreateClassroom(Rest2, 0, 0, F1, F2,
				       TrUserData).


skip_32_CreateClassroom(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_CreateClassroom(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_64_CreateClassroom(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_CreateClassroom(Rest, Z1, Z2, F1, F2,
				       TrUserData).


d_msg_ReportEvaluationScoreReply(Bin, TrUserData) ->
    dfp_read_field_def_ReportEvaluationScoreReply(Bin, 0, 0,
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_ReportEvaluationScoreReply(<<8,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, TrUserData) ->
    d_field_ReportEvaluationScoreReply_user_id(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7,
					       TrUserData);
dfp_read_field_def_ReportEvaluationScoreReply(<<16,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, TrUserData) ->
    d_field_ReportEvaluationScoreReply_score(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7,
					     TrUserData);
dfp_read_field_def_ReportEvaluationScoreReply(<<24,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, TrUserData) ->
    d_field_ReportEvaluationScoreReply_curriculum_id(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, TrUserData);
dfp_read_field_def_ReportEvaluationScoreReply(<<32,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, TrUserData) ->
    d_field_ReportEvaluationScoreReply_curriculum_step_id(Rest,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6, F7,
							  TrUserData);
dfp_read_field_def_ReportEvaluationScoreReply(<<42,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, TrUserData) ->
    d_field_ReportEvaluationScoreReply_music_name(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, TrUserData);
dfp_read_field_def_ReportEvaluationScoreReply(<<50,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, TrUserData) ->
    d_field_ReportEvaluationScoreReply_name(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7,
					    TrUserData);
dfp_read_field_def_ReportEvaluationScoreReply(<<58,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7, TrUserData) ->
    d_field_ReportEvaluationScoreReply_url(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, TrUserData);
dfp_read_field_def_ReportEvaluationScoreReply(<<>>, 0,
					      0, F1, F2, F3, F4, F5, F6, F7,
					      _) ->
    #'ReportEvaluationScoreReply'{user_id = F1, score = F2,
				  curriculum_id = F3, curriculum_step_id = F4,
				  music_name = F5, name = F6, url = F7};
dfp_read_field_def_ReportEvaluationScoreReply(Other, Z1,
					      Z2, F1, F2, F3, F4, F5, F6, F7,
					      TrUserData) ->
    dg_read_field_def_ReportEvaluationScoreReply(Other, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 TrUserData).

dg_read_field_def_ReportEvaluationScoreReply(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReportEvaluationScoreReply(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7,
						 TrUserData);
dg_read_field_def_ReportEvaluationScoreReply(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ReportEvaluationScoreReply_user_id(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     TrUserData);
      16 ->
	  d_field_ReportEvaluationScoreReply_score(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7,
						   TrUserData);
      24 ->
	  d_field_ReportEvaluationScoreReply_curriculum_id(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7,
							   TrUserData);
      32 ->
	  d_field_ReportEvaluationScoreReply_curriculum_step_id(Rest,
								0, 0, F1, F2,
								F3, F4, F5, F6,
								F7, TrUserData);
      42 ->
	  d_field_ReportEvaluationScoreReply_music_name(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, TrUserData);
      50 ->
	  d_field_ReportEvaluationScoreReply_name(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7,
						  TrUserData);
      58 ->
	  d_field_ReportEvaluationScoreReply_url(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReportEvaluationScoreReply(Rest, 0, 0, F1,
						       F2, F3, F4, F5, F6, F7,
						       TrUserData);
	    1 ->
		skip_64_ReportEvaluationScoreReply(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7,
						   TrUserData);
	    2 ->
		skip_length_delimited_ReportEvaluationScoreReply(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5, F6,
								 F7,
								 TrUserData);
	    5 ->
		skip_32_ReportEvaluationScoreReply(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7,
						   TrUserData)
	  end
    end;
dg_read_field_def_ReportEvaluationScoreReply(<<>>, 0, 0,
					     F1, F2, F3, F4, F5, F6, F7, _) ->
    #'ReportEvaluationScoreReply'{user_id = F1, score = F2,
				  curriculum_id = F3, curriculum_step_id = F4,
				  music_name = F5, name = F6, url = F7}.

d_field_ReportEvaluationScoreReply_user_id(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   TrUserData)
    when N < 57 ->
    d_field_ReportEvaluationScoreReply_user_id(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, TrUserData);
d_field_ReportEvaluationScoreReply_user_id(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, F2, F3, F4, F5, F6, F7,
					   TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ReportEvaluationScoreReply(Rest, 0,
						  0, NewFValue, F2, F3, F4, F5,
						  F6, F7, TrUserData).


d_field_ReportEvaluationScoreReply_score(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7,
					 TrUserData)
    when N < 57 ->
    d_field_ReportEvaluationScoreReply_score(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, TrUserData);
d_field_ReportEvaluationScoreReply_score(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, _, F3, F4, F5, F6, F7,
					 TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ReportEvaluationScoreReply(Rest, 0,
						  0, F1, NewFValue, F3, F4, F5,
						  F6, F7, TrUserData).


d_field_ReportEvaluationScoreReply_curriculum_id(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, TrUserData)
    when N < 57 ->
    d_field_ReportEvaluationScoreReply_curriculum_id(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7,
						     TrUserData);
d_field_ReportEvaluationScoreReply_curriculum_id(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, _, F4, F5, F6,
						 F7, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ReportEvaluationScoreReply(Rest, 0,
						  0, F1, F2, NewFValue, F4, F5,
						  F6, F7, TrUserData).


d_field_ReportEvaluationScoreReply_curriculum_step_id(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_ReportEvaluationScoreReply_curriculum_step_id(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3, F4, F5,
							  F6, F7, TrUserData);
d_field_ReportEvaluationScoreReply_curriculum_step_id(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, _, F5,
						      F6, F7, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ReportEvaluationScoreReply(Rest, 0,
						  0, F1, F2, F3, NewFValue, F5,
						  F6, F7, TrUserData).


d_field_ReportEvaluationScoreReply_music_name(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, TrUserData)
    when N < 57 ->
    d_field_ReportEvaluationScoreReply_music_name(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7,
						  TrUserData);
d_field_ReportEvaluationScoreReply_music_name(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, _, F6, F7,
					      TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ReportEvaluationScoreReply(Rest2, 0,
						  0, F1, F2, F3, F4, NewFValue,
						  F6, F7, TrUserData).


d_field_ReportEvaluationScoreReply_name(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7,
					TrUserData)
    when N < 57 ->
    d_field_ReportEvaluationScoreReply_name(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, TrUserData);
d_field_ReportEvaluationScoreReply_name(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, _, F7,
					TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ReportEvaluationScoreReply(Rest2, 0,
						  0, F1, F2, F3, F4, F5,
						  NewFValue, F7, TrUserData).


d_field_ReportEvaluationScoreReply_url(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData)
    when N < 57 ->
    d_field_ReportEvaluationScoreReply_url(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, TrUserData);
d_field_ReportEvaluationScoreReply_url(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, _,
				       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ReportEvaluationScoreReply(Rest2, 0,
						  0, F1, F2, F3, F4, F5, F6,
						  NewFValue, TrUserData).


skip_varint_ReportEvaluationScoreReply(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    skip_varint_ReportEvaluationScoreReply(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, TrUserData);
skip_varint_ReportEvaluationScoreReply(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    dfp_read_field_def_ReportEvaluationScoreReply(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, TrUserData).


skip_length_delimited_ReportEvaluationScoreReply(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReportEvaluationScoreReply(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7,
						     TrUserData);
skip_length_delimited_ReportEvaluationScoreReply(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReportEvaluationScoreReply(Rest2, 0,
						  0, F1, F2, F3, F4, F5, F6, F7,
						  TrUserData).


skip_32_ReportEvaluationScoreReply(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData) ->
    dfp_read_field_def_ReportEvaluationScoreReply(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, TrUserData).


skip_64_ReportEvaluationScoreReply(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData) ->
    dfp_read_field_def_ReportEvaluationScoreReply(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, TrUserData).


d_msg_GetEvaluationReply(Bin, TrUserData) ->
    dfp_read_field_def_GetEvaluationReply(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_GetEvaluationReply(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, TrUserData) ->
    d_field_GetEvaluationReply_score(Rest, Z1, Z2, F1,
				     TrUserData);
dfp_read_field_def_GetEvaluationReply(<<>>, 0, 0, F1,
				      TrUserData) ->
    #'GetEvaluationReply'{score =
			      lists_reverse(F1, TrUserData)};
dfp_read_field_def_GetEvaluationReply(Other, Z1, Z2, F1,
				      TrUserData) ->
    dg_read_field_def_GetEvaluationReply(Other, Z1, Z2, F1,
					 TrUserData).

dg_read_field_def_GetEvaluationReply(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetEvaluationReply(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetEvaluationReply(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetEvaluationReply_score(Rest, 0, 0, F1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetEvaluationReply(Rest, 0, 0, F1,
					       TrUserData);
	    1 ->
		skip_64_GetEvaluationReply(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetEvaluationReply(Rest, 0, 0, F1,
							 TrUserData);
	    5 ->
		skip_32_GetEvaluationReply(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetEvaluationReply(<<>>, 0, 0, F1,
				     TrUserData) ->
    #'GetEvaluationReply'{score =
			      lists_reverse(F1, TrUserData)}.

d_field_GetEvaluationReply_score(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetEvaluationReply_score(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
d_field_GetEvaluationReply_score(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ReportEvaluationScoreReply(Bs,
						    TrUserData),
		   TrUserData),
    dfp_read_field_def_GetEvaluationReply(Rest2, 0, 0,
					  cons(NewFValue, F1, TrUserData),
					  TrUserData).


skip_varint_GetEvaluationReply(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    skip_varint_GetEvaluationReply(Rest, Z1, Z2, F1,
				   TrUserData);
skip_varint_GetEvaluationReply(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetEvaluationReply(Rest, Z1, Z2, F1,
					  TrUserData).


skip_length_delimited_GetEvaluationReply(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetEvaluationReply(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetEvaluationReply(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetEvaluationReply(Rest2, 0, 0, F1,
					  TrUserData).


skip_32_GetEvaluationReply(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_GetEvaluationReply(Rest, Z1, Z2, F1,
					  TrUserData).


skip_64_GetEvaluationReply(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_GetEvaluationReply(Rest, Z1, Z2, F1,
					  TrUserData).


d_msg_StudentInfo(Bin, TrUserData) ->
    dfp_read_field_def_StudentInfo(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_StudentInfo(<<8, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_StudentInfo_user_id(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_StudentInfo(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_StudentInfo_name(Rest, Z1, Z2, F1, F2, F3,
			     TrUserData);
dfp_read_field_def_StudentInfo(<<26, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_StudentInfo_url(Rest, Z1, Z2, F1, F2, F3,
			    TrUserData);
dfp_read_field_def_StudentInfo(<<>>, 0, 0, F1, F2, F3,
			       _) ->
    #'StudentInfo'{user_id = F1, name = F2, url = F3};
dfp_read_field_def_StudentInfo(Other, Z1, Z2, F1, F2,
			       F3, TrUserData) ->
    dg_read_field_def_StudentInfo(Other, Z1, Z2, F1, F2, F3,
				  TrUserData).

dg_read_field_def_StudentInfo(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StudentInfo(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_StudentInfo(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_StudentInfo_user_id(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      18 ->
	  d_field_StudentInfo_name(Rest, 0, 0, F1, F2, F3,
				   TrUserData);
      26 ->
	  d_field_StudentInfo_url(Rest, 0, 0, F1, F2, F3,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_StudentInfo(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    1 ->
		skip_64_StudentInfo(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_StudentInfo(Rest, 0, 0, F1, F2,
						  F3, TrUserData);
	    5 ->
		skip_32_StudentInfo(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_StudentInfo(<<>>, 0, 0, F1, F2, F3,
			      _) ->
    #'StudentInfo'{user_id = F1, name = F2, url = F3}.

d_field_StudentInfo_user_id(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_StudentInfo_user_id(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_StudentInfo_user_id(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_StudentInfo(Rest, 0, 0, NewFValue,
				   F2, F3, TrUserData).


d_field_StudentInfo_name(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_StudentInfo_name(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, TrUserData);
d_field_StudentInfo_name(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_StudentInfo(Rest2, 0, 0, F1,
				   NewFValue, F3, TrUserData).


d_field_StudentInfo_url(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_StudentInfo_url(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, TrUserData);
d_field_StudentInfo_url(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_StudentInfo(Rest2, 0, 0, F1, F2,
				   NewFValue, TrUserData).


skip_varint_StudentInfo(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    skip_varint_StudentInfo(Rest, Z1, Z2, F1, F2, F3,
			    TrUserData);
skip_varint_StudentInfo(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_StudentInfo(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_length_delimited_StudentInfo(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_StudentInfo(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_StudentInfo(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StudentInfo(Rest2, 0, 0, F1, F2, F3,
				   TrUserData).


skip_32_StudentInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_StudentInfo(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_64_StudentInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_StudentInfo(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


d_msg_GetOnlineStudentReply(Bin, TrUserData) ->
    dfp_read_field_def_GetOnlineStudentReply(Bin, 0, 0,
					     id([], TrUserData), TrUserData).

dfp_read_field_def_GetOnlineStudentReply(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, TrUserData) ->
    d_field_GetOnlineStudentReply_student(Rest, Z1, Z2, F1,
					  TrUserData);
dfp_read_field_def_GetOnlineStudentReply(<<>>, 0, 0, F1,
					 TrUserData) ->
    #'GetOnlineStudentReply'{student =
				 lists_reverse(F1, TrUserData)};
dfp_read_field_def_GetOnlineStudentReply(Other, Z1, Z2,
					 F1, TrUserData) ->
    dg_read_field_def_GetOnlineStudentReply(Other, Z1, Z2,
					    F1, TrUserData).

dg_read_field_def_GetOnlineStudentReply(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetOnlineStudentReply(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetOnlineStudentReply(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetOnlineStudentReply_student(Rest, 0, 0, F1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetOnlineStudentReply(Rest, 0, 0, F1,
						  TrUserData);
	    1 ->
		skip_64_GetOnlineStudentReply(Rest, 0, 0, F1,
					      TrUserData);
	    2 ->
		skip_length_delimited_GetOnlineStudentReply(Rest, 0, 0,
							    F1, TrUserData);
	    5 ->
		skip_32_GetOnlineStudentReply(Rest, 0, 0, F1,
					      TrUserData)
	  end
    end;
dg_read_field_def_GetOnlineStudentReply(<<>>, 0, 0, F1,
					TrUserData) ->
    #'GetOnlineStudentReply'{student =
				 lists_reverse(F1, TrUserData)}.

d_field_GetOnlineStudentReply_student(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetOnlineStudentReply_student(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
d_field_GetOnlineStudentReply_student(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_StudentInfo(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetOnlineStudentReply(Rest2, 0, 0,
					     cons(NewFValue, F1, TrUserData),
					     TrUserData).


skip_varint_GetOnlineStudentReply(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    skip_varint_GetOnlineStudentReply(Rest, Z1, Z2, F1,
				      TrUserData);
skip_varint_GetOnlineStudentReply(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetOnlineStudentReply(Rest, Z1, Z2,
					     F1, TrUserData).


skip_length_delimited_GetOnlineStudentReply(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetOnlineStudentReply(Rest, N + 7,
						X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetOnlineStudentReply(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetOnlineStudentReply(Rest2, 0, 0,
					     F1, TrUserData).


skip_32_GetOnlineStudentReply(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    dfp_read_field_def_GetOnlineStudentReply(Rest, Z1, Z2,
					     F1, TrUserData).


skip_64_GetOnlineStudentReply(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    dfp_read_field_def_GetOnlineStudentReply(Rest, Z1, Z2,
					     F1, TrUserData).


d_msg_BroadcastMsgPayload(Bin, TrUserData) ->
    dfp_read_field_def_BroadcastMsgPayload(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_BroadcastMsgPayload(<<8,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_BroadcastMsgPayload_protocol_id(Rest, Z1, Z2,
					    F1, F2, F3, TrUserData);
dfp_read_field_def_BroadcastMsgPayload(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_BroadcastMsgPayload_data(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData);
dfp_read_field_def_BroadcastMsgPayload(<<26,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_BroadcastMsgPayload_data1(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData);
dfp_read_field_def_BroadcastMsgPayload(<<>>, 0, 0, F1,
				       F2, F3, _) ->
    #'BroadcastMsgPayload'{protocol_id = F1, data = F2,
			   data1 = F3};
dfp_read_field_def_BroadcastMsgPayload(Other, Z1, Z2,
				       F1, F2, F3, TrUserData) ->
    dg_read_field_def_BroadcastMsgPayload(Other, Z1, Z2, F1,
					  F2, F3, TrUserData).

dg_read_field_def_BroadcastMsgPayload(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BroadcastMsgPayload(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
dg_read_field_def_BroadcastMsgPayload(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_BroadcastMsgPayload_protocol_id(Rest, 0, 0, F1,
						  F2, F3, TrUserData);
      18 ->
	  d_field_BroadcastMsgPayload_data(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
      26 ->
	  d_field_BroadcastMsgPayload_data1(Rest, 0, 0, F1, F2,
					    F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BroadcastMsgPayload(Rest, 0, 0, F1, F2, F3,
						TrUserData);
	    1 ->
		skip_64_BroadcastMsgPayload(Rest, 0, 0, F1, F2, F3,
					    TrUserData);
	    2 ->
		skip_length_delimited_BroadcastMsgPayload(Rest, 0, 0,
							  F1, F2, F3,
							  TrUserData);
	    5 ->
		skip_32_BroadcastMsgPayload(Rest, 0, 0, F1, F2, F3,
					    TrUserData)
	  end
    end;
dg_read_field_def_BroadcastMsgPayload(<<>>, 0, 0, F1,
				      F2, F3, _) ->
    #'BroadcastMsgPayload'{protocol_id = F1, data = F2,
			   data1 = F3}.

d_field_BroadcastMsgPayload_protocol_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_BroadcastMsgPayload_protocol_id(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3,
					    TrUserData);
d_field_BroadcastMsgPayload_protocol_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F2, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_BroadcastMsgPayload(Rest, 0, 0,
					   NewFValue, F2, F3, TrUserData).


d_field_BroadcastMsgPayload_data(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_BroadcastMsgPayload_data(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_BroadcastMsgPayload_data(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_BroadcastMsgPayload(Rest2, 0, 0, F1,
					   NewFValue, F3, TrUserData).


d_field_BroadcastMsgPayload_data1(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_BroadcastMsgPayload_data1(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_BroadcastMsgPayload_data1(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_BroadcastMsgPayload(Rest2, 0, 0, F1,
					   F2, NewFValue, TrUserData).


skip_varint_BroadcastMsgPayload(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_BroadcastMsgPayload(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
skip_varint_BroadcastMsgPayload(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_BroadcastMsgPayload(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData).


skip_length_delimited_BroadcastMsgPayload(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_BroadcastMsgPayload(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3,
					      TrUserData);
skip_length_delimited_BroadcastMsgPayload(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BroadcastMsgPayload(Rest2, 0, 0, F1,
					   F2, F3, TrUserData).


skip_32_BroadcastMsgPayload(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_BroadcastMsgPayload(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData).


skip_64_BroadcastMsgPayload(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_BroadcastMsgPayload(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData).


d_msg_BroadcastMsg(Bin, TrUserData) ->
    dfp_read_field_def_BroadcastMsg(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_BroadcastMsg(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_BroadcastMsg_teacher_id(Rest, Z1, Z2, F1, F2,
				    TrUserData);
dfp_read_field_def_BroadcastMsg(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_BroadcastMsg_payload(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_BroadcastMsg(<<>>, 0, 0, F1, F2,
				_) ->
    #'BroadcastMsg'{teacher_id = F1, payload = F2};
dfp_read_field_def_BroadcastMsg(Other, Z1, Z2, F1, F2,
				TrUserData) ->
    dg_read_field_def_BroadcastMsg(Other, Z1, Z2, F1, F2,
				   TrUserData).

dg_read_field_def_BroadcastMsg(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BroadcastMsg(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_BroadcastMsg(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_BroadcastMsg_teacher_id(Rest, 0, 0, F1, F2,
					  TrUserData);
      18 ->
	  d_field_BroadcastMsg_payload(Rest, 0, 0, F1, F2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BroadcastMsg(Rest, 0, 0, F1, F2,
					 TrUserData);
	    1 ->
		skip_64_BroadcastMsg(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_BroadcastMsg(Rest, 0, 0, F1, F2,
						   TrUserData);
	    5 ->
		skip_32_BroadcastMsg(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_BroadcastMsg(<<>>, 0, 0, F1, F2, _) ->
    #'BroadcastMsg'{teacher_id = F1, payload = F2}.

d_field_BroadcastMsg_teacher_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_BroadcastMsg_teacher_id(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
d_field_BroadcastMsg_teacher_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_BroadcastMsg(Rest, 0, 0, NewFValue,
				    F2, TrUserData).


d_field_BroadcastMsg_payload(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_BroadcastMsg_payload(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_BroadcastMsg_payload(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_BroadcastMsgPayload(Bs,
					     TrUserData),
		   TrUserData),
    dfp_read_field_def_BroadcastMsg(Rest2, 0, 0, F1,
				    if F2 == undefined -> NewFValue;
				       true ->
					   merge_msg_BroadcastMsgPayload(F2,
									 NewFValue,
									 TrUserData)
				    end,
				    TrUserData).


skip_varint_BroadcastMsg(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    skip_varint_BroadcastMsg(Rest, Z1, Z2, F1, F2,
			     TrUserData);
skip_varint_BroadcastMsg(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_BroadcastMsg(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_length_delimited_BroadcastMsg(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_BroadcastMsg(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_BroadcastMsg(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BroadcastMsg(Rest2, 0, 0, F1, F2,
				    TrUserData).


skip_32_BroadcastMsg(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_BroadcastMsg(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_64_BroadcastMsg(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_BroadcastMsg(Rest, Z1, Z2, F1, F2,
				    TrUserData).


d_msg_GetClassOnlineStudent(Bin, TrUserData) ->
    dfp_read_field_def_GetClassOnlineStudent(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_GetClassOnlineStudent(<<8,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    d_field_GetClassOnlineStudent_school_id(Rest, Z1, Z2,
					    F1, F2, TrUserData);
dfp_read_field_def_GetClassOnlineStudent(<<16,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    d_field_GetClassOnlineStudent_teacher_id(Rest, Z1, Z2,
					     F1, F2, TrUserData);
dfp_read_field_def_GetClassOnlineStudent(<<>>, 0, 0, F1,
					 F2, _) ->
    #'GetClassOnlineStudent'{school_id = F1,
			     teacher_id = F2};
dfp_read_field_def_GetClassOnlineStudent(Other, Z1, Z2,
					 F1, F2, TrUserData) ->
    dg_read_field_def_GetClassOnlineStudent(Other, Z1, Z2,
					    F1, F2, TrUserData).

dg_read_field_def_GetClassOnlineStudent(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetClassOnlineStudent(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_GetClassOnlineStudent(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GetClassOnlineStudent_school_id(Rest, 0, 0, F1,
						  F2, TrUserData);
      16 ->
	  d_field_GetClassOnlineStudent_teacher_id(Rest, 0, 0, F1,
						   F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetClassOnlineStudent(Rest, 0, 0, F1, F2,
						  TrUserData);
	    1 ->
		skip_64_GetClassOnlineStudent(Rest, 0, 0, F1, F2,
					      TrUserData);
	    2 ->
		skip_length_delimited_GetClassOnlineStudent(Rest, 0, 0,
							    F1, F2, TrUserData);
	    5 ->
		skip_32_GetClassOnlineStudent(Rest, 0, 0, F1, F2,
					      TrUserData)
	  end
    end;
dg_read_field_def_GetClassOnlineStudent(<<>>, 0, 0, F1,
					F2, _) ->
    #'GetClassOnlineStudent'{school_id = F1,
			     teacher_id = F2}.

d_field_GetClassOnlineStudent_school_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_GetClassOnlineStudent_school_id(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
d_field_GetClassOnlineStudent_school_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_GetClassOnlineStudent(Rest, 0, 0,
					     NewFValue, F2, TrUserData).


d_field_GetClassOnlineStudent_teacher_id(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_GetClassOnlineStudent_teacher_id(Rest, N + 7,
					     X bsl N + Acc, F1, F2, TrUserData);
d_field_GetClassOnlineStudent_teacher_id(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_GetClassOnlineStudent(Rest, 0, 0, F1,
					     NewFValue, TrUserData).


skip_varint_GetClassOnlineStudent(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_GetClassOnlineStudent(Rest, Z1, Z2, F1, F2,
				      TrUserData);
skip_varint_GetClassOnlineStudent(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_GetClassOnlineStudent(Rest, Z1, Z2,
					     F1, F2, TrUserData).


skip_length_delimited_GetClassOnlineStudent(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetClassOnlineStudent(Rest, N + 7,
						X bsl N + Acc, F1, F2,
						TrUserData);
skip_length_delimited_GetClassOnlineStudent(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetClassOnlineStudent(Rest2, 0, 0,
					     F1, F2, TrUserData).


skip_32_GetClassOnlineStudent(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_GetClassOnlineStudent(Rest, Z1, Z2,
					     F1, F2, TrUserData).


skip_64_GetClassOnlineStudent(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_GetClassOnlineStudent(Rest, Z1, Z2,
					     F1, F2, TrUserData).


d_msg_Heartbeat(Bin, TrUserData) ->
    dfp_read_field_def_Heartbeat(Bin, 0, 0,
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Heartbeat(<<8, Rest/binary>>, Z1, Z2,
			     F1, TrUserData) ->
    d_field_Heartbeat_num(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Heartbeat(<<>>, 0, 0, F1, _) ->
    #'Heartbeat'{num = F1};
dfp_read_field_def_Heartbeat(Other, Z1, Z2, F1,
			     TrUserData) ->
    dg_read_field_def_Heartbeat(Other, Z1, Z2, F1,
				TrUserData).

dg_read_field_def_Heartbeat(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Heartbeat(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
dg_read_field_def_Heartbeat(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_Heartbeat_num(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Heartbeat(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_Heartbeat(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_Heartbeat(Rest, 0, 0, F1,
						TrUserData);
	    5 -> skip_32_Heartbeat(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_Heartbeat(<<>>, 0, 0, F1, _) ->
    #'Heartbeat'{num = F1}.

d_field_Heartbeat_num(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, TrUserData)
    when N < 57 ->
    d_field_Heartbeat_num(Rest, N + 7, X bsl N + Acc, F1,
			  TrUserData);
d_field_Heartbeat_num(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Heartbeat(Rest, 0, 0, NewFValue,
				 TrUserData).


skip_varint_Heartbeat(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    skip_varint_Heartbeat(Rest, Z1, Z2, F1, TrUserData);
skip_varint_Heartbeat(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    dfp_read_field_def_Heartbeat(Rest, Z1, Z2, F1,
				 TrUserData).


skip_length_delimited_Heartbeat(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Heartbeat(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_Heartbeat(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Heartbeat(Rest2, 0, 0, F1,
				 TrUserData).


skip_32_Heartbeat(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_Heartbeat(Rest, Z1, Z2, F1,
				 TrUserData).


skip_64_Heartbeat(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_Heartbeat(Rest, Z1, Z2, F1,
				 TrUserData).


d_msg_GetClassOnlineStudentReply(Bin, TrUserData) ->
    dfp_read_field_def_GetClassOnlineStudentReply(Bin, 0, 0,
						  id([], TrUserData),
						  TrUserData).

dfp_read_field_def_GetClassOnlineStudentReply(<<10,
						Rest/binary>>,
					      Z1, Z2, F1, TrUserData) ->
    d_field_GetClassOnlineStudentReply_student(Rest, Z1, Z2,
					       F1, TrUserData);
dfp_read_field_def_GetClassOnlineStudentReply(<<>>, 0,
					      0, F1, TrUserData) ->
    #'GetClassOnlineStudentReply'{student =
				      lists_reverse(F1, TrUserData)};
dfp_read_field_def_GetClassOnlineStudentReply(Other, Z1,
					      Z2, F1, TrUserData) ->
    dg_read_field_def_GetClassOnlineStudentReply(Other, Z1,
						 Z2, F1, TrUserData).

dg_read_field_def_GetClassOnlineStudentReply(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetClassOnlineStudentReply(Rest,
						 N + 7, X bsl N + Acc, F1,
						 TrUserData);
dg_read_field_def_GetClassOnlineStudentReply(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetClassOnlineStudentReply_student(Rest, 0, 0,
						     F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetClassOnlineStudentReply(Rest, 0, 0, F1,
						       TrUserData);
	    1 ->
		skip_64_GetClassOnlineStudentReply(Rest, 0, 0, F1,
						   TrUserData);
	    2 ->
		skip_length_delimited_GetClassOnlineStudentReply(Rest,
								 0, 0, F1,
								 TrUserData);
	    5 ->
		skip_32_GetClassOnlineStudentReply(Rest, 0, 0, F1,
						   TrUserData)
	  end
    end;
dg_read_field_def_GetClassOnlineStudentReply(<<>>, 0, 0,
					     F1, TrUserData) ->
    #'GetClassOnlineStudentReply'{student =
				      lists_reverse(F1, TrUserData)}.

d_field_GetClassOnlineStudentReply_student(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetClassOnlineStudentReply_student(Rest, N + 7,
					       X bsl N + Acc, F1, TrUserData);
d_field_GetClassOnlineStudentReply_student(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_StudentInfo(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetClassOnlineStudentReply(Rest2, 0,
						  0,
						  cons(NewFValue, F1,
						       TrUserData),
						  TrUserData).


skip_varint_GetClassOnlineStudentReply(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    skip_varint_GetClassOnlineStudentReply(Rest, Z1, Z2, F1,
					   TrUserData);
skip_varint_GetClassOnlineStudentReply(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetClassOnlineStudentReply(Rest, Z1,
						  Z2, F1, TrUserData).


skip_length_delimited_GetClassOnlineStudentReply(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetClassOnlineStudentReply(Rest,
						     N + 7, X bsl N + Acc, F1,
						     TrUserData);
skip_length_delimited_GetClassOnlineStudentReply(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetClassOnlineStudentReply(Rest2, 0,
						  0, F1, TrUserData).


skip_32_GetClassOnlineStudentReply(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetClassOnlineStudentReply(Rest, Z1,
						  Z2, F1, TrUserData).


skip_64_GetClassOnlineStudentReply(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetClassOnlineStudentReply(Rest, Z1,
						  Z2, F1, TrUserData).


d_msg_GetOnlineStudent(Bin, TrUserData) ->
    dfp_read_field_def_GetOnlineStudent(Bin, 0, 0,
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GetOnlineStudent(<<8, Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    d_field_GetOnlineStudent_school_id(Rest, Z1, Z2, F1,
				       TrUserData);
dfp_read_field_def_GetOnlineStudent(<<>>, 0, 0, F1,
				    _) ->
    #'GetOnlineStudent'{school_id = F1};
dfp_read_field_def_GetOnlineStudent(Other, Z1, Z2, F1,
				    TrUserData) ->
    dg_read_field_def_GetOnlineStudent(Other, Z1, Z2, F1,
				       TrUserData).

dg_read_field_def_GetOnlineStudent(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetOnlineStudent(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetOnlineStudent(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GetOnlineStudent_school_id(Rest, 0, 0, F1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetOnlineStudent(Rest, 0, 0, F1,
					     TrUserData);
	    1 ->
		skip_64_GetOnlineStudent(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetOnlineStudent(Rest, 0, 0, F1,
						       TrUserData);
	    5 ->
		skip_32_GetOnlineStudent(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetOnlineStudent(<<>>, 0, 0, F1, _) ->
    #'GetOnlineStudent'{school_id = F1}.

d_field_GetOnlineStudent_school_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetOnlineStudent_school_id(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
d_field_GetOnlineStudent_school_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_GetOnlineStudent(Rest, 0, 0,
					NewFValue, TrUserData).


skip_varint_GetOnlineStudent(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    skip_varint_GetOnlineStudent(Rest, Z1, Z2, F1,
				 TrUserData);
skip_varint_GetOnlineStudent(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetOnlineStudent(Rest, Z1, Z2, F1,
					TrUserData).


skip_length_delimited_GetOnlineStudent(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetOnlineStudent(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetOnlineStudent(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetOnlineStudent(Rest2, 0, 0, F1,
					TrUserData).


skip_32_GetOnlineStudent(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_GetOnlineStudent(Rest, Z1, Z2, F1,
					TrUserData).


skip_64_GetOnlineStudent(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_GetOnlineStudent(Rest, Z1, Z2, F1,
					TrUserData).


d_msg_ClassIsOver(Bin, TrUserData) ->
    dfp_read_field_def_ClassIsOver(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ClassIsOver(<<8, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_ClassIsOver_teacher_id(Rest, Z1, Z2, F1,
				   TrUserData);
dfp_read_field_def_ClassIsOver(<<>>, 0, 0, F1, _) ->
    #'ClassIsOver'{teacher_id = F1};
dfp_read_field_def_ClassIsOver(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_ClassIsOver(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_ClassIsOver(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ClassIsOver(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_ClassIsOver(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ClassIsOver_teacher_id(Rest, 0, 0, F1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ClassIsOver(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_ClassIsOver(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_ClassIsOver(Rest, 0, 0, F1,
						  TrUserData);
	    5 -> skip_32_ClassIsOver(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_ClassIsOver(<<>>, 0, 0, F1, _) ->
    #'ClassIsOver'{teacher_id = F1}.

d_field_ClassIsOver_teacher_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ClassIsOver_teacher_id(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
d_field_ClassIsOver_teacher_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ClassIsOver(Rest, 0, 0, NewFValue,
				   TrUserData).


skip_varint_ClassIsOver(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_ClassIsOver(Rest, Z1, Z2, F1, TrUserData);
skip_varint_ClassIsOver(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_ClassIsOver(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_ClassIsOver(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ClassIsOver(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_ClassIsOver(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ClassIsOver(Rest2, 0, 0, F1,
				   TrUserData).


skip_32_ClassIsOver(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_ClassIsOver(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_ClassIsOver(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_ClassIsOver(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_StartEvaluationAgain(Bin, TrUserData) ->
    dfp_read_field_def_StartEvaluationAgain(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id([], TrUserData), TrUserData).

dfp_read_field_def_StartEvaluationAgain(<<8,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    d_field_StartEvaluationAgain_evaluation_id(Rest, Z1, Z2,
					       F1, F2, TrUserData);
dfp_read_field_def_StartEvaluationAgain(<<18,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    d_field_StartEvaluationAgain_students(Rest, Z1, Z2, F1,
					  F2, TrUserData);
dfp_read_field_def_StartEvaluationAgain(<<>>, 0, 0, F1,
					F2, TrUserData) ->
    #'StartEvaluationAgain'{evaluation_id = F1,
			    students = lists_reverse(F2, TrUserData)};
dfp_read_field_def_StartEvaluationAgain(Other, Z1, Z2,
					F1, F2, TrUserData) ->
    dg_read_field_def_StartEvaluationAgain(Other, Z1, Z2,
					   F1, F2, TrUserData).

dg_read_field_def_StartEvaluationAgain(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StartEvaluationAgain(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_StartEvaluationAgain(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_StartEvaluationAgain_evaluation_id(Rest, 0, 0,
						     F1, F2, TrUserData);
      18 ->
	  d_field_StartEvaluationAgain_students(Rest, 0, 0, F1,
						F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_StartEvaluationAgain(Rest, 0, 0, F1, F2,
						 TrUserData);
	    1 ->
		skip_64_StartEvaluationAgain(Rest, 0, 0, F1, F2,
					     TrUserData);
	    2 ->
		skip_length_delimited_StartEvaluationAgain(Rest, 0, 0,
							   F1, F2, TrUserData);
	    5 ->
		skip_32_StartEvaluationAgain(Rest, 0, 0, F1, F2,
					     TrUserData)
	  end
    end;
dg_read_field_def_StartEvaluationAgain(<<>>, 0, 0, F1,
				       F2, TrUserData) ->
    #'StartEvaluationAgain'{evaluation_id = F1,
			    students = lists_reverse(F2, TrUserData)}.

d_field_StartEvaluationAgain_evaluation_id(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_StartEvaluationAgain_evaluation_id(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
d_field_StartEvaluationAgain_evaluation_id(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_StartEvaluationAgain(Rest, 0, 0,
					    NewFValue, F2, TrUserData).


d_field_StartEvaluationAgain_students(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_StartEvaluationAgain_students(Rest, N + 7,
					  X bsl N + Acc, F1, F2, TrUserData);
d_field_StartEvaluationAgain_students(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_StudentId(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_StartEvaluationAgain(Rest2, 0, 0, F1,
					    cons(NewFValue, F2, TrUserData),
					    TrUserData).


skip_varint_StartEvaluationAgain(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_StartEvaluationAgain(Rest, Z1, Z2, F1, F2,
				     TrUserData);
skip_varint_StartEvaluationAgain(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_StartEvaluationAgain(Rest, Z1, Z2,
					    F1, F2, TrUserData).


skip_length_delimited_StartEvaluationAgain(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_StartEvaluationAgain(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
skip_length_delimited_StartEvaluationAgain(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StartEvaluationAgain(Rest2, 0, 0, F1,
					    F2, TrUserData).


skip_32_StartEvaluationAgain(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_StartEvaluationAgain(Rest, Z1, Z2,
					    F1, F2, TrUserData).


skip_64_StartEvaluationAgain(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_StartEvaluationAgain(Rest, Z1, Z2,
					    F1, F2, TrUserData).


d_msg_LockScreen(Bin, TrUserData) ->
    dfp_read_field_def_LockScreen(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_LockScreen(<<8, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    d_field_LockScreen_teacher_id(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_LockScreen(<<16, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    d_field_LockScreen_status(Rest, Z1, Z2, F1, F2,
			      TrUserData);
dfp_read_field_def_LockScreen(<<>>, 0, 0, F1, F2, _) ->
    #'LockScreen'{teacher_id = F1, status = F2};
dfp_read_field_def_LockScreen(Other, Z1, Z2, F1, F2,
			      TrUserData) ->
    dg_read_field_def_LockScreen(Other, Z1, Z2, F1, F2,
				 TrUserData).

dg_read_field_def_LockScreen(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LockScreen(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
dg_read_field_def_LockScreen(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LockScreen_teacher_id(Rest, 0, 0, F1, F2,
					TrUserData);
      16 ->
	  d_field_LockScreen_status(Rest, 0, 0, F1, F2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LockScreen(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_LockScreen(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_LockScreen(Rest, 0, 0, F1, F2,
						 TrUserData);
	    5 -> skip_32_LockScreen(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_LockScreen(<<>>, 0, 0, F1, F2, _) ->
    #'LockScreen'{teacher_id = F1, status = F2}.

d_field_LockScreen_teacher_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_LockScreen_teacher_id(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_LockScreen_teacher_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_LockScreen(Rest, 0, 0, NewFValue, F2,
				  TrUserData).


d_field_LockScreen_status(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_LockScreen_status(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
d_field_LockScreen_status(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_LockScreen(Rest, 0, 0, F1, NewFValue,
				  TrUserData).


skip_varint_LockScreen(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, TrUserData) ->
    skip_varint_LockScreen(Rest, Z1, Z2, F1, F2,
			   TrUserData);
skip_varint_LockScreen(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_LockScreen(Rest, Z1, Z2, F1, F2,
				  TrUserData).


skip_length_delimited_LockScreen(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LockScreen(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_LockScreen(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LockScreen(Rest2, 0, 0, F1, F2,
				  TrUserData).


skip_32_LockScreen(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, TrUserData) ->
    dfp_read_field_def_LockScreen(Rest, Z1, Z2, F1, F2,
				  TrUserData).


skip_64_LockScreen(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, TrUserData) ->
    dfp_read_field_def_LockScreen(Rest, Z1, Z2, F1, F2,
				  TrUserData).


d_msg_IsGroupControl(Bin, TrUserData) ->
    dfp_read_field_def_IsGroupControl(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_IsGroupControl(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_IsGroupControl_teacher_id(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_IsGroupControl(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_IsGroupControl_status(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_IsGroupControl(<<>>, 0, 0, F1, F2,
				  _) ->
    #'IsGroupControl'{teacher_id = F1, status = F2};
dfp_read_field_def_IsGroupControl(Other, Z1, Z2, F1, F2,
				  TrUserData) ->
    dg_read_field_def_IsGroupControl(Other, Z1, Z2, F1, F2,
				     TrUserData).

dg_read_field_def_IsGroupControl(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_IsGroupControl(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_IsGroupControl(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_IsGroupControl_teacher_id(Rest, 0, 0, F1, F2,
					    TrUserData);
      16 ->
	  d_field_IsGroupControl_status(Rest, 0, 0, F1, F2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_IsGroupControl(Rest, 0, 0, F1, F2,
					   TrUserData);
	    1 ->
		skip_64_IsGroupControl(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_IsGroupControl(Rest, 0, 0, F1, F2,
						     TrUserData);
	    5 ->
		skip_32_IsGroupControl(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_IsGroupControl(<<>>, 0, 0, F1, F2,
				 _) ->
    #'IsGroupControl'{teacher_id = F1, status = F2}.

d_field_IsGroupControl_teacher_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_IsGroupControl_teacher_id(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_IsGroupControl_teacher_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_IsGroupControl(Rest, 0, 0, NewFValue,
				      F2, TrUserData).


d_field_IsGroupControl_status(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_IsGroupControl_status(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_IsGroupControl_status(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_IsGroupControl(Rest, 0, 0, F1,
				      NewFValue, TrUserData).


skip_varint_IsGroupControl(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_IsGroupControl(Rest, Z1, Z2, F1, F2,
			       TrUserData);
skip_varint_IsGroupControl(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_IsGroupControl(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_length_delimited_IsGroupControl(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_IsGroupControl(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_IsGroupControl(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_IsGroupControl(Rest2, 0, 0, F1, F2,
				      TrUserData).


skip_32_IsGroupControl(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_IsGroupControl(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_64_IsGroupControl(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_IsGroupControl(Rest, Z1, Z2, F1, F2,
				      TrUserData).


d_msg_LoginReply(Bin, TrUserData) ->
    dfp_read_field_def_LoginReply(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_LoginReply(<<8, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    d_field_LoginReply_error_type(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_LoginReply(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    d_field_LoginReply_msg(Rest, Z1, Z2, F1, F2,
			   TrUserData);
dfp_read_field_def_LoginReply(<<>>, 0, 0, F1, F2, _) ->
    #'LoginReply'{error_type = F1, msg = F2};
dfp_read_field_def_LoginReply(Other, Z1, Z2, F1, F2,
			      TrUserData) ->
    dg_read_field_def_LoginReply(Other, Z1, Z2, F1, F2,
				 TrUserData).

dg_read_field_def_LoginReply(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginReply(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
dg_read_field_def_LoginReply(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LoginReply_error_type(Rest, 0, 0, F1, F2,
					TrUserData);
      18 ->
	  d_field_LoginReply_msg(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginReply(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_LoginReply(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_LoginReply(Rest, 0, 0, F1, F2,
						 TrUserData);
	    5 -> skip_32_LoginReply(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_LoginReply(<<>>, 0, 0, F1, F2, _) ->
    #'LoginReply'{error_type = F1, msg = F2}.

d_field_LoginReply_error_type(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_LoginReply_error_type(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_LoginReply_error_type(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_LoginReply(Rest, 0, 0, NewFValue, F2,
				  TrUserData).


d_field_LoginReply_msg(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_LoginReply_msg(Rest, N + 7, X bsl N + Acc, F1,
			   F2, TrUserData);
d_field_LoginReply_msg(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_LoginReply(Rest2, 0, 0, F1,
				  NewFValue, TrUserData).


skip_varint_LoginReply(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, TrUserData) ->
    skip_varint_LoginReply(Rest, Z1, Z2, F1, F2,
			   TrUserData);
skip_varint_LoginReply(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_LoginReply(Rest, Z1, Z2, F1, F2,
				  TrUserData).


skip_length_delimited_LoginReply(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginReply(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_LoginReply(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginReply(Rest2, 0, 0, F1, F2,
				  TrUserData).


skip_32_LoginReply(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, TrUserData) ->
    dfp_read_field_def_LoginReply(Rest, Z1, Z2, F1, F2,
				  TrUserData).


skip_64_LoginReply(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, TrUserData) ->
    dfp_read_field_def_LoginReply(Rest, Z1, Z2, F1, F2,
				  TrUserData).


d_msg_StartEvaluationReply(Bin, TrUserData) ->
    dfp_read_field_def_StartEvaluationReply(Bin, 0, 0,
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_StartEvaluationReply(<<8,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    d_field_StartEvaluationReply_evaluation_id(Rest, Z1, Z2,
					       F1, TrUserData);
dfp_read_field_def_StartEvaluationReply(<<>>, 0, 0, F1,
					_) ->
    #'StartEvaluationReply'{evaluation_id = F1};
dfp_read_field_def_StartEvaluationReply(Other, Z1, Z2,
					F1, TrUserData) ->
    dg_read_field_def_StartEvaluationReply(Other, Z1, Z2,
					   F1, TrUserData).

dg_read_field_def_StartEvaluationReply(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StartEvaluationReply(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_StartEvaluationReply(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_StartEvaluationReply_evaluation_id(Rest, 0, 0,
						     F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_StartEvaluationReply(Rest, 0, 0, F1,
						 TrUserData);
	    1 ->
		skip_64_StartEvaluationReply(Rest, 0, 0, F1,
					     TrUserData);
	    2 ->
		skip_length_delimited_StartEvaluationReply(Rest, 0, 0,
							   F1, TrUserData);
	    5 ->
		skip_32_StartEvaluationReply(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_StartEvaluationReply(<<>>, 0, 0, F1,
				       _) ->
    #'StartEvaluationReply'{evaluation_id = F1}.

d_field_StartEvaluationReply_evaluation_id(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_StartEvaluationReply_evaluation_id(Rest, N + 7,
					       X bsl N + Acc, F1, TrUserData);
d_field_StartEvaluationReply_evaluation_id(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_StartEvaluationReply(Rest, 0, 0,
					    NewFValue, TrUserData).


skip_varint_StartEvaluationReply(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    skip_varint_StartEvaluationReply(Rest, Z1, Z2, F1,
				     TrUserData);
skip_varint_StartEvaluationReply(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_StartEvaluationReply(Rest, Z1, Z2,
					    F1, TrUserData).


skip_length_delimited_StartEvaluationReply(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_StartEvaluationReply(Rest, N + 7,
					       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_StartEvaluationReply(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StartEvaluationReply(Rest2, 0, 0, F1,
					    TrUserData).


skip_32_StartEvaluationReply(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_StartEvaluationReply(Rest, Z1, Z2,
					    F1, TrUserData).


skip_64_StartEvaluationReply(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_StartEvaluationReply(Rest, Z1, Z2,
					    F1, TrUserData).


d_msg_GetEvaluationScore(Bin, TrUserData) ->
    dfp_read_field_def_GetEvaluationScore(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_GetEvaluationScore(<<8,
					Rest/binary>>,
				      Z1, Z2, F1, TrUserData) ->
    d_field_GetEvaluationScore_evaluation_id(Rest, Z1, Z2,
					     F1, TrUserData);
dfp_read_field_def_GetEvaluationScore(<<>>, 0, 0, F1,
				      _) ->
    #'GetEvaluationScore'{evaluation_id = F1};
dfp_read_field_def_GetEvaluationScore(Other, Z1, Z2, F1,
				      TrUserData) ->
    dg_read_field_def_GetEvaluationScore(Other, Z1, Z2, F1,
					 TrUserData).

dg_read_field_def_GetEvaluationScore(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetEvaluationScore(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetEvaluationScore(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GetEvaluationScore_evaluation_id(Rest, 0, 0, F1,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetEvaluationScore(Rest, 0, 0, F1,
					       TrUserData);
	    1 ->
		skip_64_GetEvaluationScore(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetEvaluationScore(Rest, 0, 0, F1,
							 TrUserData);
	    5 ->
		skip_32_GetEvaluationScore(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetEvaluationScore(<<>>, 0, 0, F1,
				     _) ->
    #'GetEvaluationScore'{evaluation_id = F1}.

d_field_GetEvaluationScore_evaluation_id(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetEvaluationScore_evaluation_id(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
d_field_GetEvaluationScore_evaluation_id(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_GetEvaluationScore(Rest, 0, 0,
					  NewFValue, TrUserData).


skip_varint_GetEvaluationScore(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    skip_varint_GetEvaluationScore(Rest, Z1, Z2, F1,
				   TrUserData);
skip_varint_GetEvaluationScore(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetEvaluationScore(Rest, Z1, Z2, F1,
					  TrUserData).


skip_length_delimited_GetEvaluationScore(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetEvaluationScore(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetEvaluationScore(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetEvaluationScore(Rest2, 0, 0, F1,
					  TrUserData).


skip_32_GetEvaluationScore(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_GetEvaluationScore(Rest, Z1, Z2, F1,
					  TrUserData).


skip_64_GetEvaluationScore(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_GetEvaluationScore(Rest, Z1, Z2, F1,
					  TrUserData).


d_msg_ReportEvaluationScore(Bin, TrUserData) ->
    dfp_read_field_def_ReportEvaluationScore(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_ReportEvaluationScore(<<8,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5,
					 TrUserData) ->
    d_field_ReportEvaluationScore_user_id(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, TrUserData);
dfp_read_field_def_ReportEvaluationScore(<<16,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5,
					 TrUserData) ->
    d_field_ReportEvaluationScore_score(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, TrUserData);
dfp_read_field_def_ReportEvaluationScore(<<24,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5,
					 TrUserData) ->
    d_field_ReportEvaluationScore_curriculum_id(Rest, Z1,
						Z2, F1, F2, F3, F4, F5,
						TrUserData);
dfp_read_field_def_ReportEvaluationScore(<<32,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5,
					 TrUserData) ->
    d_field_ReportEvaluationScore_curriculum_step_id(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     TrUserData);
dfp_read_field_def_ReportEvaluationScore(<<42,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5,
					 TrUserData) ->
    d_field_ReportEvaluationScore_music_name(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, TrUserData);
dfp_read_field_def_ReportEvaluationScore(<<>>, 0, 0, F1,
					 F2, F3, F4, F5, _) ->
    #'ReportEvaluationScore'{user_id = F1, score = F2,
			     curriculum_id = F3, curriculum_step_id = F4,
			     music_name = F5};
dfp_read_field_def_ReportEvaluationScore(Other, Z1, Z2,
					 F1, F2, F3, F4, F5, TrUserData) ->
    dg_read_field_def_ReportEvaluationScore(Other, Z1, Z2,
					    F1, F2, F3, F4, F5, TrUserData).

dg_read_field_def_ReportEvaluationScore(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReportEvaluationScore(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    TrUserData);
dg_read_field_def_ReportEvaluationScore(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5,
					TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ReportEvaluationScore_user_id(Rest, 0, 0, F1,
						F2, F3, F4, F5, TrUserData);
      16 ->
	  d_field_ReportEvaluationScore_score(Rest, 0, 0, F1, F2,
					      F3, F4, F5, TrUserData);
      24 ->
	  d_field_ReportEvaluationScore_curriculum_id(Rest, 0, 0,
						      F1, F2, F3, F4, F5,
						      TrUserData);
      32 ->
	  d_field_ReportEvaluationScore_curriculum_step_id(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, TrUserData);
      42 ->
	  d_field_ReportEvaluationScore_music_name(Rest, 0, 0, F1,
						   F2, F3, F4, F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReportEvaluationScore(Rest, 0, 0, F1, F2,
						  F3, F4, F5, TrUserData);
	    1 ->
		skip_64_ReportEvaluationScore(Rest, 0, 0, F1, F2, F3,
					      F4, F5, TrUserData);
	    2 ->
		skip_length_delimited_ReportEvaluationScore(Rest, 0, 0,
							    F1, F2, F3, F4, F5,
							    TrUserData);
	    5 ->
		skip_32_ReportEvaluationScore(Rest, 0, 0, F1, F2, F3,
					      F4, F5, TrUserData)
	  end
    end;
dg_read_field_def_ReportEvaluationScore(<<>>, 0, 0, F1,
					F2, F3, F4, F5, _) ->
    #'ReportEvaluationScore'{user_id = F1, score = F2,
			     curriculum_id = F3, curriculum_step_id = F4,
			     music_name = F5}.

d_field_ReportEvaluationScore_user_id(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_ReportEvaluationScore_user_id(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5,
					  TrUserData);
d_field_ReportEvaluationScore_user_id(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ReportEvaluationScore(Rest, 0, 0,
					     NewFValue, F2, F3, F4, F5,
					     TrUserData).


d_field_ReportEvaluationScore_score(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_ReportEvaluationScore_score(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5,
					TrUserData);
d_field_ReportEvaluationScore_score(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, _, F3, F4, F5, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ReportEvaluationScore(Rest, 0, 0, F1,
					     NewFValue, F3, F4, F5, TrUserData).


d_field_ReportEvaluationScore_curriculum_id(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5,
					    TrUserData)
    when N < 57 ->
    d_field_ReportEvaluationScore_curriculum_id(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, TrUserData);
d_field_ReportEvaluationScore_curriculum_id(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, _, F4, F5,
					    TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ReportEvaluationScore(Rest, 0, 0, F1,
					     F2, NewFValue, F4, F5, TrUserData).


d_field_ReportEvaluationScore_curriculum_step_id(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5,
						 TrUserData)
    when N < 57 ->
    d_field_ReportEvaluationScore_curriculum_step_id(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5,
						     TrUserData);
d_field_ReportEvaluationScore_curriculum_step_id(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, _, F5,
						 TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ReportEvaluationScore(Rest, 0, 0, F1,
					     F2, F3, NewFValue, F5, TrUserData).


d_field_ReportEvaluationScore_music_name(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_ReportEvaluationScore_music_name(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     TrUserData);
d_field_ReportEvaluationScore_music_name(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, _,
					 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ReportEvaluationScore(Rest2, 0, 0,
					     F1, F2, F3, F4, NewFValue,
					     TrUserData).


skip_varint_ReportEvaluationScore(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_ReportEvaluationScore(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData);
skip_varint_ReportEvaluationScore(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_ReportEvaluationScore(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, TrUserData).


skip_length_delimited_ReportEvaluationScore(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5,
					    TrUserData)
    when N < 57 ->
    skip_length_delimited_ReportEvaluationScore(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, TrUserData);
skip_length_delimited_ReportEvaluationScore(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5,
					    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReportEvaluationScore(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, TrUserData).


skip_32_ReportEvaluationScore(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_ReportEvaluationScore(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, TrUserData).


skip_64_ReportEvaluationScore(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_ReportEvaluationScore(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'Login'{} -> merge_msg_Login(Prev, New, TrUserData);
      #'StartEvaluation'{} ->
	  merge_msg_StartEvaluation(Prev, New, TrUserData);
      #'StudentId'{} ->
	  merge_msg_StudentId(Prev, New, TrUserData);
      #'CreateClassroom'{} ->
	  merge_msg_CreateClassroom(Prev, New, TrUserData);
      #'ReportEvaluationScoreReply'{} ->
	  merge_msg_ReportEvaluationScoreReply(Prev, New,
					       TrUserData);
      #'GetEvaluationReply'{} ->
	  merge_msg_GetEvaluationReply(Prev, New, TrUserData);
      #'StudentInfo'{} ->
	  merge_msg_StudentInfo(Prev, New, TrUserData);
      #'GetOnlineStudentReply'{} ->
	  merge_msg_GetOnlineStudentReply(Prev, New, TrUserData);
      #'BroadcastMsgPayload'{} ->
	  merge_msg_BroadcastMsgPayload(Prev, New, TrUserData);
      #'BroadcastMsg'{} ->
	  merge_msg_BroadcastMsg(Prev, New, TrUserData);
      #'GetClassOnlineStudent'{} ->
	  merge_msg_GetClassOnlineStudent(Prev, New, TrUserData);
      #'Heartbeat'{} ->
	  merge_msg_Heartbeat(Prev, New, TrUserData);
      #'GetClassOnlineStudentReply'{} ->
	  merge_msg_GetClassOnlineStudentReply(Prev, New,
					       TrUserData);
      #'GetOnlineStudent'{} ->
	  merge_msg_GetOnlineStudent(Prev, New, TrUserData);
      #'ClassIsOver'{} ->
	  merge_msg_ClassIsOver(Prev, New, TrUserData);
      #'StartEvaluationAgain'{} ->
	  merge_msg_StartEvaluationAgain(Prev, New, TrUserData);
      #'LockScreen'{} ->
	  merge_msg_LockScreen(Prev, New, TrUserData);
      #'IsGroupControl'{} ->
	  merge_msg_IsGroupControl(Prev, New, TrUserData);
      #'LoginReply'{} ->
	  merge_msg_LoginReply(Prev, New, TrUserData);
      #'StartEvaluationReply'{} ->
	  merge_msg_StartEvaluationReply(Prev, New, TrUserData);
      #'GetEvaluationScore'{} ->
	  merge_msg_GetEvaluationScore(Prev, New, TrUserData);
      #'ReportEvaluationScore'{} ->
	  merge_msg_ReportEvaluationScore(Prev, New, TrUserData)
    end.

merge_msg_Login(#'Login'{},
		#'Login'{user_id = NFuser_id, token = NFtoken}, _) ->
    #'Login'{user_id = NFuser_id, token = NFtoken}.

merge_msg_StartEvaluation(#'StartEvaluation'{},
			  #'StartEvaluation'{teacher_id = NFteacher_id,
					     curriculum_id = NFcurriculum_id,
					     curriculum_step_id =
						 NFcurriculum_step_id,
					     music_name = NFmusic_name},
			  _) ->
    #'StartEvaluation'{teacher_id = NFteacher_id,
		       curriculum_id = NFcurriculum_id,
		       curriculum_step_id = NFcurriculum_step_id,
		       music_name = NFmusic_name}.

merge_msg_StudentId(#'StudentId'{},
		    #'StudentId'{user_id = NFuser_id}, _) ->
    #'StudentId'{user_id = NFuser_id}.

merge_msg_CreateClassroom(#'CreateClassroom'{students =
						 PFstudents},
			  #'CreateClassroom'{teacher_id = NFteacher_id,
					     students = NFstudents},
			  TrUserData) ->
    #'CreateClassroom'{teacher_id = NFteacher_id,
		       students =
			   'erlang_++'(PFstudents, NFstudents, TrUserData)}.

merge_msg_ReportEvaluationScoreReply(#'ReportEvaluationScoreReply'{},
				     #'ReportEvaluationScoreReply'{user_id =
								       NFuser_id,
								   score =
								       NFscore,
								   curriculum_id
								       =
								       NFcurriculum_id,
								   curriculum_step_id
								       =
								       NFcurriculum_step_id,
								   music_name =
								       NFmusic_name,
								   name =
								       NFname,
								   url = NFurl},
				     _) ->
    #'ReportEvaluationScoreReply'{user_id = NFuser_id,
				  score = NFscore,
				  curriculum_id = NFcurriculum_id,
				  curriculum_step_id = NFcurriculum_step_id,
				  music_name = NFmusic_name, name = NFname,
				  url = NFurl}.

merge_msg_GetEvaluationReply(#'GetEvaluationReply'{score
						       = PFscore},
			     #'GetEvaluationReply'{score = NFscore},
			     TrUserData) ->
    #'GetEvaluationReply'{score =
			      'erlang_++'(PFscore, NFscore, TrUserData)}.

merge_msg_StudentInfo(#'StudentInfo'{},
		      #'StudentInfo'{user_id = NFuser_id, name = NFname,
				     url = NFurl},
		      _) ->
    #'StudentInfo'{user_id = NFuser_id, name = NFname,
		   url = NFurl}.

merge_msg_GetOnlineStudentReply(#'GetOnlineStudentReply'{student
							     = PFstudent},
				#'GetOnlineStudentReply'{student = NFstudent},
				TrUserData) ->
    #'GetOnlineStudentReply'{student =
				 'erlang_++'(PFstudent, NFstudent, TrUserData)}.

merge_msg_BroadcastMsgPayload(#'BroadcastMsgPayload'{data
							 = PFdata,
						     data1 = PFdata1},
			      #'BroadcastMsgPayload'{protocol_id =
							 NFprotocol_id,
						     data = NFdata,
						     data1 = NFdata1},
			      _) ->
    #'BroadcastMsgPayload'{protocol_id = NFprotocol_id,
			   data =
			       if NFdata =:= undefined -> PFdata;
				  true -> NFdata
			       end,
			   data1 =
			       if NFdata1 =:= undefined -> PFdata1;
				  true -> NFdata1
			       end}.

merge_msg_BroadcastMsg(#'BroadcastMsg'{payload =
					   PFpayload},
		       #'BroadcastMsg'{teacher_id = NFteacher_id,
				       payload = NFpayload},
		       TrUserData) ->
    #'BroadcastMsg'{teacher_id = NFteacher_id,
		    payload =
			if PFpayload /= undefined, NFpayload /= undefined ->
			       merge_msg_BroadcastMsgPayload(PFpayload,
							     NFpayload,
							     TrUserData);
			   PFpayload == undefined -> NFpayload;
			   NFpayload == undefined -> PFpayload
			end}.

merge_msg_GetClassOnlineStudent(#'GetClassOnlineStudent'{},
				#'GetClassOnlineStudent'{school_id =
							     NFschool_id,
							 teacher_id =
							     NFteacher_id},
				_) ->
    #'GetClassOnlineStudent'{school_id = NFschool_id,
			     teacher_id = NFteacher_id}.

merge_msg_Heartbeat(#'Heartbeat'{},
		    #'Heartbeat'{num = NFnum}, _) ->
    #'Heartbeat'{num = NFnum}.

merge_msg_GetClassOnlineStudentReply(#'GetClassOnlineStudentReply'{student
								       =
								       PFstudent},
				     #'GetClassOnlineStudentReply'{student =
								       NFstudent},
				     TrUserData) ->
    #'GetClassOnlineStudentReply'{student =
				      'erlang_++'(PFstudent, NFstudent,
						  TrUserData)}.

merge_msg_GetOnlineStudent(#'GetOnlineStudent'{},
			   #'GetOnlineStudent'{school_id = NFschool_id}, _) ->
    #'GetOnlineStudent'{school_id = NFschool_id}.

merge_msg_ClassIsOver(#'ClassIsOver'{},
		      #'ClassIsOver'{teacher_id = NFteacher_id}, _) ->
    #'ClassIsOver'{teacher_id = NFteacher_id}.

merge_msg_StartEvaluationAgain(#'StartEvaluationAgain'{students
							   = PFstudents},
			       #'StartEvaluationAgain'{evaluation_id =
							   NFevaluation_id,
						       students = NFstudents},
			       TrUserData) ->
    #'StartEvaluationAgain'{evaluation_id = NFevaluation_id,
			    students =
				'erlang_++'(PFstudents, NFstudents,
					    TrUserData)}.

merge_msg_LockScreen(#'LockScreen'{},
		     #'LockScreen'{teacher_id = NFteacher_id,
				   status = NFstatus},
		     _) ->
    #'LockScreen'{teacher_id = NFteacher_id,
		  status = NFstatus}.

merge_msg_IsGroupControl(#'IsGroupControl'{},
			 #'IsGroupControl'{teacher_id = NFteacher_id,
					   status = NFstatus},
			 _) ->
    #'IsGroupControl'{teacher_id = NFteacher_id,
		      status = NFstatus}.

merge_msg_LoginReply(#'LoginReply'{},
		     #'LoginReply'{error_type = NFerror_type, msg = NFmsg},
		     _) ->
    #'LoginReply'{error_type = NFerror_type, msg = NFmsg}.

merge_msg_StartEvaluationReply(#'StartEvaluationReply'{},
			       #'StartEvaluationReply'{evaluation_id =
							   NFevaluation_id},
			       _) ->
    #'StartEvaluationReply'{evaluation_id =
				NFevaluation_id}.

merge_msg_GetEvaluationScore(#'GetEvaluationScore'{},
			     #'GetEvaluationScore'{evaluation_id =
						       NFevaluation_id},
			     _) ->
    #'GetEvaluationScore'{evaluation_id = NFevaluation_id}.

merge_msg_ReportEvaluationScore(#'ReportEvaluationScore'{},
				#'ReportEvaluationScore'{user_id = NFuser_id,
							 score = NFscore,
							 curriculum_id =
							     NFcurriculum_id,
							 curriculum_step_id =
							     NFcurriculum_step_id,
							 music_name =
							     NFmusic_name},
				_) ->
    #'ReportEvaluationScore'{user_id = NFuser_id,
			     score = NFscore, curriculum_id = NFcurriculum_id,
			     curriculum_step_id = NFcurriculum_step_id,
			     music_name = NFmusic_name}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Login'{} -> v_msg_Login(Msg, ['Login'], TrUserData);
      #'StartEvaluation'{} ->
	  v_msg_StartEvaluation(Msg, ['StartEvaluation'],
				TrUserData);
      #'StudentId'{} ->
	  v_msg_StudentId(Msg, ['StudentId'], TrUserData);
      #'CreateClassroom'{} ->
	  v_msg_CreateClassroom(Msg, ['CreateClassroom'],
				TrUserData);
      #'ReportEvaluationScoreReply'{} ->
	  v_msg_ReportEvaluationScoreReply(Msg,
					   ['ReportEvaluationScoreReply'],
					   TrUserData);
      #'GetEvaluationReply'{} ->
	  v_msg_GetEvaluationReply(Msg, ['GetEvaluationReply'],
				   TrUserData);
      #'StudentInfo'{} ->
	  v_msg_StudentInfo(Msg, ['StudentInfo'], TrUserData);
      #'GetOnlineStudentReply'{} ->
	  v_msg_GetOnlineStudentReply(Msg,
				      ['GetOnlineStudentReply'], TrUserData);
      #'BroadcastMsgPayload'{} ->
	  v_msg_BroadcastMsgPayload(Msg, ['BroadcastMsgPayload'],
				    TrUserData);
      #'BroadcastMsg'{} ->
	  v_msg_BroadcastMsg(Msg, ['BroadcastMsg'], TrUserData);
      #'GetClassOnlineStudent'{} ->
	  v_msg_GetClassOnlineStudent(Msg,
				      ['GetClassOnlineStudent'], TrUserData);
      #'Heartbeat'{} ->
	  v_msg_Heartbeat(Msg, ['Heartbeat'], TrUserData);
      #'GetClassOnlineStudentReply'{} ->
	  v_msg_GetClassOnlineStudentReply(Msg,
					   ['GetClassOnlineStudentReply'],
					   TrUserData);
      #'GetOnlineStudent'{} ->
	  v_msg_GetOnlineStudent(Msg, ['GetOnlineStudent'],
				 TrUserData);
      #'ClassIsOver'{} ->
	  v_msg_ClassIsOver(Msg, ['ClassIsOver'], TrUserData);
      #'StartEvaluationAgain'{} ->
	  v_msg_StartEvaluationAgain(Msg,
				     ['StartEvaluationAgain'], TrUserData);
      #'LockScreen'{} ->
	  v_msg_LockScreen(Msg, ['LockScreen'], TrUserData);
      #'IsGroupControl'{} ->
	  v_msg_IsGroupControl(Msg, ['IsGroupControl'],
			       TrUserData);
      #'LoginReply'{} ->
	  v_msg_LoginReply(Msg, ['LoginReply'], TrUserData);
      #'StartEvaluationReply'{} ->
	  v_msg_StartEvaluationReply(Msg,
				     ['StartEvaluationReply'], TrUserData);
      #'GetEvaluationScore'{} ->
	  v_msg_GetEvaluationScore(Msg, ['GetEvaluationScore'],
				   TrUserData);
      #'ReportEvaluationScore'{} ->
	  v_msg_ReportEvaluationScore(Msg,
				      ['ReportEvaluationScore'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Login/3}).
v_msg_Login(#'Login'{user_id = F1, token = F2}, Path,
	    _) ->
    v_type_int32(F1, [user_id | Path]),
    v_type_string(F2, [token | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_StartEvaluation/3}).
v_msg_StartEvaluation(#'StartEvaluation'{teacher_id =
					     F1,
					 curriculum_id = F2,
					 curriculum_step_id = F3,
					 music_name = F4},
		      Path, _) ->
    v_type_int32(F1, [teacher_id | Path]),
    v_type_int32(F2, [curriculum_id | Path]),
    v_type_int32(F3, [curriculum_step_id | Path]),
    v_type_string(F4, [music_name | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_StudentId/3}).
v_msg_StudentId(#'StudentId'{user_id = F1}, Path, _) ->
    v_type_int32(F1, [user_id | Path]), ok;
v_msg_StudentId(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'StudentId'}, X, Path).

-dialyzer({nowarn_function,v_msg_CreateClassroom/3}).
v_msg_CreateClassroom(#'CreateClassroom'{teacher_id =
					     F1,
					 students = F2},
		      Path, TrUserData) ->
    v_type_int32(F1, [teacher_id | Path]),
    if is_list(F2) ->
	   _ = [v_msg_StudentId(Elem, [students | Path],
				TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'StudentId'}}, F2,
			 Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ReportEvaluationScoreReply/3}).
v_msg_ReportEvaluationScoreReply(#'ReportEvaluationScoreReply'{user_id
								   = F1,
							       score = F2,
							       curriculum_id =
								   F3,
							       curriculum_step_id
								   = F4,
							       music_name = F5,
							       name = F6,
							       url = F7},
				 Path, _) ->
    v_type_int32(F1, [user_id | Path]),
    v_type_int32(F2, [score | Path]),
    v_type_int32(F3, [curriculum_id | Path]),
    v_type_int32(F4, [curriculum_step_id | Path]),
    v_type_string(F5, [music_name | Path]),
    v_type_string(F6, [name | Path]),
    v_type_string(F7, [url | Path]),
    ok;
v_msg_ReportEvaluationScoreReply(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'ReportEvaluationScoreReply'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_GetEvaluationReply/3}).
v_msg_GetEvaluationReply(#'GetEvaluationReply'{score =
						   F1},
			 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_ReportEvaluationScoreReply(Elem,
						 [score | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ReportEvaluationScoreReply'}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_StudentInfo/3}).
v_msg_StudentInfo(#'StudentInfo'{user_id = F1,
				 name = F2, url = F3},
		  Path, _) ->
    v_type_int32(F1, [user_id | Path]),
    v_type_string(F2, [name | Path]),
    v_type_string(F3, [url | Path]),
    ok;
v_msg_StudentInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'StudentInfo'}, X, Path).

-dialyzer({nowarn_function,v_msg_GetOnlineStudentReply/3}).
v_msg_GetOnlineStudentReply(#'GetOnlineStudentReply'{student
							 = F1},
			    Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_StudentInfo(Elem, [student | Path],
				  TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'StudentInfo'}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_BroadcastMsgPayload/3}).
v_msg_BroadcastMsgPayload(#'BroadcastMsgPayload'{protocol_id
						     = F1,
						 data = F2, data1 = F3},
			  Path, _) ->
    v_type_int32(F1, [protocol_id | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [data | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [data1 | Path])
    end,
    ok;
v_msg_BroadcastMsgPayload(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'BroadcastMsgPayload'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_BroadcastMsg/3}).
v_msg_BroadcastMsg(#'BroadcastMsg'{teacher_id = F1,
				   payload = F2},
		   Path, TrUserData) ->
    v_type_int32(F1, [teacher_id | Path]),
    v_msg_BroadcastMsgPayload(F2, [payload | Path],
			      TrUserData),
    ok.

-dialyzer({nowarn_function,v_msg_GetClassOnlineStudent/3}).
v_msg_GetClassOnlineStudent(#'GetClassOnlineStudent'{school_id
							 = F1,
						     teacher_id = F2},
			    Path, _) ->
    v_type_int32(F1, [school_id | Path]),
    v_type_int32(F2, [teacher_id | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_Heartbeat/3}).
v_msg_Heartbeat(#'Heartbeat'{num = F1}, Path, _) ->
    v_type_int32(F1, [num | Path]), ok.

-dialyzer({nowarn_function,v_msg_GetClassOnlineStudentReply/3}).
v_msg_GetClassOnlineStudentReply(#'GetClassOnlineStudentReply'{student
								   = F1},
				 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_StudentInfo(Elem, [student | Path],
				  TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'StudentInfo'}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GetOnlineStudent/3}).
v_msg_GetOnlineStudent(#'GetOnlineStudent'{school_id =
					       F1},
		       Path, _) ->
    v_type_int32(F1, [school_id | Path]), ok.

-dialyzer({nowarn_function,v_msg_ClassIsOver/3}).
v_msg_ClassIsOver(#'ClassIsOver'{teacher_id = F1}, Path,
		  _) ->
    v_type_int32(F1, [teacher_id | Path]), ok.

-dialyzer({nowarn_function,v_msg_StartEvaluationAgain/3}).
v_msg_StartEvaluationAgain(#'StartEvaluationAgain'{evaluation_id
						       = F1,
						   students = F2},
			   Path, TrUserData) ->
    v_type_int32(F1, [evaluation_id | Path]),
    if is_list(F2) ->
	   _ = [v_msg_StudentId(Elem, [students | Path],
				TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'StudentId'}}, F2,
			 Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_LockScreen/3}).
v_msg_LockScreen(#'LockScreen'{teacher_id = F1,
			       status = F2},
		 Path, _) ->
    v_type_int32(F1, [teacher_id | Path]),
    v_type_int32(F2, [status | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_IsGroupControl/3}).
v_msg_IsGroupControl(#'IsGroupControl'{teacher_id = F1,
				       status = F2},
		     Path, _) ->
    v_type_int32(F1, [teacher_id | Path]),
    v_type_int32(F2, [status | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_LoginReply/3}).
v_msg_LoginReply(#'LoginReply'{error_type = F1,
			       msg = F2},
		 Path, _) ->
    v_type_int32(F1, [error_type | Path]),
    v_type_string(F2, [msg | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_StartEvaluationReply/3}).
v_msg_StartEvaluationReply(#'StartEvaluationReply'{evaluation_id
						       = F1},
			   Path, _) ->
    v_type_int32(F1, [evaluation_id | Path]), ok.

-dialyzer({nowarn_function,v_msg_GetEvaluationScore/3}).
v_msg_GetEvaluationScore(#'GetEvaluationScore'{evaluation_id
						   = F1},
			 Path, _) ->
    v_type_int32(F1, [evaluation_id | Path]), ok.

-dialyzer({nowarn_function,v_msg_ReportEvaluationScore/3}).
v_msg_ReportEvaluationScore(#'ReportEvaluationScore'{user_id
							 = F1,
						     score = F2,
						     curriculum_id = F3,
						     curriculum_step_id = F4,
						     music_name = F5},
			    Path, _) ->
    v_type_int32(F1, [user_id | Path]),
    v_type_int32(F2, [score | Path]),
    v_type_int32(F3, [curriculum_id | Path]),
    v_type_int32(F4, [curriculum_step_id | Path]),
    v_type_string(F5, [music_name | Path]),
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{msg, 'Login'},
      [#field{name = user_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = token, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'StartEvaluation'},
      [#field{name = teacher_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = curriculum_id, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []},
       #field{name = curriculum_step_id, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = music_name, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'StudentId'},
      [#field{name = user_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, 'CreateClassroom'},
      [#field{name = teacher_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = students, fnum = 2, rnum = 3,
	      type = {msg, 'StudentId'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'ReportEvaluationScoreReply'},
      [#field{name = user_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = score, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = curriculum_id, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = curriculum_step_id, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = music_name, fnum = 5, rnum = 6,
	      type = string, occurrence = required, opts = []},
       #field{name = name, fnum = 6, rnum = 7, type = string,
	      occurrence = required, opts = []},
       #field{name = url, fnum = 7, rnum = 8, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'GetEvaluationReply'},
      [#field{name = score, fnum = 1, rnum = 2,
	      type = {msg, 'ReportEvaluationScoreReply'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'StudentInfo'},
      [#field{name = user_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = url, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'GetOnlineStudentReply'},
      [#field{name = student, fnum = 1, rnum = 2,
	      type = {msg, 'StudentInfo'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'BroadcastMsgPayload'},
      [#field{name = protocol_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = data, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = data1, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'BroadcastMsg'},
      [#field{name = teacher_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = payload, fnum = 2, rnum = 3,
	      type = {msg, 'BroadcastMsgPayload'},
	      occurrence = required, opts = []}]},
     {{msg, 'GetClassOnlineStudent'},
      [#field{name = school_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = teacher_id, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, 'Heartbeat'},
      [#field{name = num, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'GetClassOnlineStudentReply'},
      [#field{name = student, fnum = 1, rnum = 2,
	      type = {msg, 'StudentInfo'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'GetOnlineStudent'},
      [#field{name = school_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, 'ClassIsOver'},
      [#field{name = teacher_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, 'StartEvaluationAgain'},
      [#field{name = evaluation_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = students, fnum = 2, rnum = 3,
	      type = {msg, 'StudentId'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'LockScreen'},
      [#field{name = teacher_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = status, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'IsGroupControl'},
      [#field{name = teacher_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = status, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'LoginReply'},
      [#field{name = error_type, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'StartEvaluationReply'},
      [#field{name = evaluation_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, 'GetEvaluationScore'},
      [#field{name = evaluation_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, 'ReportEvaluationScore'},
      [#field{name = user_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = score, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = curriculum_id, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = curriculum_step_id, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = music_name, fnum = 5, rnum = 6,
	      type = string, occurrence = required, opts = []}]}].


get_msg_names() ->
    ['Login', 'StartEvaluation', 'StudentId',
     'CreateClassroom', 'ReportEvaluationScoreReply',
     'GetEvaluationReply', 'StudentInfo',
     'GetOnlineStudentReply', 'BroadcastMsgPayload',
     'BroadcastMsg', 'GetClassOnlineStudent', 'Heartbeat',
     'GetClassOnlineStudentReply', 'GetOnlineStudent',
     'ClassIsOver', 'StartEvaluationAgain', 'LockScreen',
     'IsGroupControl', 'LoginReply', 'StartEvaluationReply',
     'GetEvaluationScore', 'ReportEvaluationScore'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Login') ->
    [#field{name = user_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = token, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def('StartEvaluation') ->
    [#field{name = teacher_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = curriculum_id, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []},
     #field{name = curriculum_step_id, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = music_name, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []}];
find_msg_def('StudentId') ->
    [#field{name = user_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []}];
find_msg_def('CreateClassroom') ->
    [#field{name = teacher_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = students, fnum = 2, rnum = 3,
	    type = {msg, 'StudentId'}, occurrence = repeated,
	    opts = []}];
find_msg_def('ReportEvaluationScoreReply') ->
    [#field{name = user_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = score, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = curriculum_id, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = curriculum_step_id, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = music_name, fnum = 5, rnum = 6,
	    type = string, occurrence = required, opts = []},
     #field{name = name, fnum = 6, rnum = 7, type = string,
	    occurrence = required, opts = []},
     #field{name = url, fnum = 7, rnum = 8, type = string,
	    occurrence = required, opts = []}];
find_msg_def('GetEvaluationReply') ->
    [#field{name = score, fnum = 1, rnum = 2,
	    type = {msg, 'ReportEvaluationScoreReply'},
	    occurrence = repeated, opts = []}];
find_msg_def('StudentInfo') ->
    [#field{name = user_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = url, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []}];
find_msg_def('GetOnlineStudentReply') ->
    [#field{name = student, fnum = 1, rnum = 2,
	    type = {msg, 'StudentInfo'}, occurrence = repeated,
	    opts = []}];
find_msg_def('BroadcastMsgPayload') ->
    [#field{name = protocol_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = data, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = data1, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('BroadcastMsg') ->
    [#field{name = teacher_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = payload, fnum = 2, rnum = 3,
	    type = {msg, 'BroadcastMsgPayload'},
	    occurrence = required, opts = []}];
find_msg_def('GetClassOnlineStudent') ->
    [#field{name = school_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = teacher_id, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []}];
find_msg_def('Heartbeat') ->
    [#field{name = num, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('GetClassOnlineStudentReply') ->
    [#field{name = student, fnum = 1, rnum = 2,
	    type = {msg, 'StudentInfo'}, occurrence = repeated,
	    opts = []}];
find_msg_def('GetOnlineStudent') ->
    [#field{name = school_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []}];
find_msg_def('ClassIsOver') ->
    [#field{name = teacher_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []}];
find_msg_def('StartEvaluationAgain') ->
    [#field{name = evaluation_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = students, fnum = 2, rnum = 3,
	    type = {msg, 'StudentId'}, occurrence = repeated,
	    opts = []}];
find_msg_def('LockScreen') ->
    [#field{name = teacher_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = status, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('IsGroupControl') ->
    [#field{name = teacher_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = status, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('LoginReply') ->
    [#field{name = error_type, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def('StartEvaluationReply') ->
    [#field{name = evaluation_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []}];
find_msg_def('GetEvaluationScore') ->
    [#field{name = evaluation_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []}];
find_msg_def('ReportEvaluationScore') ->
    [#field{name = user_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = score, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = curriculum_id, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = curriculum_step_id, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = music_name, fnum = 5, rnum = 6,
	    type = string, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'framework.msg'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
