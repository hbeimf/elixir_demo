%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(gwc_proto).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("gwc_proto.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'Broadcast'() :: #'Broadcast'{}.
-type 'Uids'() :: #'Uids'{}.
-type 'ReportServerInfo'() :: #'ReportServerInfo'{}.
-type 'NotifyClose'() :: #'NotifyClose'{}.
-type 'HeartbeatRes'() :: #'HeartbeatRes'{}.
-type 'TickUser'() :: #'TickUser'{}.
-type 'HeartbeatReq'() :: #'HeartbeatReq'{}.
-type 'BroadcastByUID'() :: #'BroadcastByUID'{}.
-export_type(['Broadcast'/0, 'Uids'/0, 'ReportServerInfo'/0, 'NotifyClose'/0, 'HeartbeatRes'/0, 'TickUser'/0, 'HeartbeatReq'/0, 'BroadcastByUID'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Broadcast'{} -> e_msg_Broadcast(Msg, TrUserData);
      #'Uids'{} -> e_msg_Uids(Msg, TrUserData);
      #'ReportServerInfo'{} ->
	  e_msg_ReportServerInfo(Msg, TrUserData);
      #'NotifyClose'{} -> e_msg_NotifyClose(Msg, TrUserData);
      #'HeartbeatRes'{} ->
	  e_msg_HeartbeatRes(Msg, TrUserData);
      #'TickUser'{} -> e_msg_TickUser(Msg, TrUserData);
      #'HeartbeatReq'{} ->
	  e_msg_HeartbeatReq(Msg, TrUserData);
      #'BroadcastByUID'{} ->
	  e_msg_BroadcastByUID(Msg, TrUserData)
    end.



e_msg_Broadcast(Msg, TrUserData) ->
    e_msg_Broadcast(Msg, <<>>, TrUserData).


e_msg_Broadcast(#'Broadcast'{serverType = F1,
			     serverID = F2, payload = F3},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= <<>> -> B2;
		true -> e_type_bytes(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_Uids(Msg, TrUserData) ->
    e_msg_Uids(Msg, <<>>, TrUserData).


e_msg_Uids(#'Uids'{uid = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_ReportServerInfo(Msg, TrUserData) ->
    e_msg_ReportServerInfo(Msg, <<>>, TrUserData).


e_msg_ReportServerInfo(#'ReportServerInfo'{serverType =
					       F1,
					   serverID = F2, serverURI = F3,
					   gwcURI = F4, max = F5},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case iolist_size(TrF3) of
		    0 -> B2;
		    _ -> e_type_string(TrF3, <<B2/binary, 26>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case iolist_size(TrF4) of
		    0 -> B3;
		    _ -> e_type_string(TrF4, <<B3/binary, 34>>)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= 0 -> B4;
		true -> e_type_int32(TrF5, <<B4/binary, 40>>)
	     end
	   end
    end.

e_msg_NotifyClose(Msg, TrUserData) ->
    e_msg_NotifyClose(Msg, <<>>, TrUserData).


e_msg_NotifyClose(#'NotifyClose'{uid = F1}, Bin,
		  TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_HeartbeatRes(_Msg, _TrUserData) -> <<>>.

e_msg_TickUser(Msg, TrUserData) ->
    e_msg_TickUser(Msg, <<>>, TrUserData).


e_msg_TickUser(#'TickUser'{uid = F1}, Bin,
	       TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_HeartbeatReq(_Msg, _TrUserData) -> <<>>.

e_msg_BroadcastByUID(Msg, TrUserData) ->
    e_msg_BroadcastByUID(Msg, <<>>, TrUserData).


e_msg_BroadcastByUID(#'BroadcastByUID'{uids = F1,
				       payload = F2},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_BroadcastByUID_uids(TrF1, Bin, TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= <<>> -> B1;
		true -> e_type_bytes(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_mfield_BroadcastByUID_uids(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Uids(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_BroadcastByUID_uids([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_BroadcastByUID_uids(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_BroadcastByUID_uids(Rest, Bin3, TrUserData);
e_field_BroadcastByUID_uids([], Bin, _TrUserData) ->
    Bin.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Broadcast' -> d_msg_Broadcast(Bin, TrUserData);
      'Uids' -> d_msg_Uids(Bin, TrUserData);
      'ReportServerInfo' ->
	  d_msg_ReportServerInfo(Bin, TrUserData);
      'NotifyClose' -> d_msg_NotifyClose(Bin, TrUserData);
      'HeartbeatRes' -> d_msg_HeartbeatRes(Bin, TrUserData);
      'TickUser' -> d_msg_TickUser(Bin, TrUserData);
      'HeartbeatReq' -> d_msg_HeartbeatReq(Bin, TrUserData);
      'BroadcastByUID' ->
	  d_msg_BroadcastByUID(Bin, TrUserData)
    end.



d_msg_Broadcast(Bin, TrUserData) ->
    dfp_read_field_def_Broadcast(Bin, 0, 0,
				 id(<<>>, TrUserData), id(<<>>, TrUserData),
				 id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_Broadcast(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    d_field_Broadcast_serverType(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_Broadcast(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    d_field_Broadcast_serverID(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_Broadcast(<<26, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    d_field_Broadcast_payload(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData);
dfp_read_field_def_Broadcast(<<>>, 0, 0, F1, F2, F3,
			     _) ->
    #'Broadcast'{serverType = F1, serverID = F2,
		 payload = F3};
dfp_read_field_def_Broadcast(Other, Z1, Z2, F1, F2, F3,
			     TrUserData) ->
    dg_read_field_def_Broadcast(Other, Z1, Z2, F1, F2, F3,
				TrUserData).

dg_read_field_def_Broadcast(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Broadcast(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
dg_read_field_def_Broadcast(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Broadcast_serverType(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      18 ->
	  d_field_Broadcast_serverID(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      26 ->
	  d_field_Broadcast_payload(Rest, 0, 0, F1, F2, F3,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Broadcast(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
	    1 ->
		skip_64_Broadcast(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_Broadcast(Rest, 0, 0, F1, F2, F3,
						TrUserData);
	    5 ->
		skip_32_Broadcast(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_Broadcast(<<>>, 0, 0, F1, F2, F3,
			    _) ->
    #'Broadcast'{serverType = F1, serverID = F2,
		 payload = F3}.

d_field_Broadcast_serverType(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_Broadcast_serverType(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_Broadcast_serverType(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Broadcast(Rest2, 0, 0, NewFValue, F2,
				 F3, TrUserData).


d_field_Broadcast_serverID(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_Broadcast_serverID(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_Broadcast_serverID(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Broadcast(Rest2, 0, 0, F1, NewFValue,
				 F3, TrUserData).


d_field_Broadcast_payload(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_Broadcast_payload(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
d_field_Broadcast_payload(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Broadcast(Rest2, 0, 0, F1, F2,
				 NewFValue, TrUserData).


skip_varint_Broadcast(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, TrUserData) ->
    skip_varint_Broadcast(Rest, Z1, Z2, F1, F2, F3,
			  TrUserData);
skip_varint_Broadcast(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, TrUserData) ->
    dfp_read_field_def_Broadcast(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


skip_length_delimited_Broadcast(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Broadcast(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_Broadcast(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Broadcast(Rest2, 0, 0, F1, F2, F3,
				 TrUserData).


skip_32_Broadcast(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, TrUserData) ->
    dfp_read_field_def_Broadcast(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


skip_64_Broadcast(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, TrUserData) ->
    dfp_read_field_def_Broadcast(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


d_msg_Uids(Bin, TrUserData) ->
    dfp_read_field_def_Uids(Bin, 0, 0, id(<<>>, TrUserData),
			    TrUserData).

dfp_read_field_def_Uids(<<10, Rest/binary>>, Z1, Z2, F1,
			TrUserData) ->
    d_field_Uids_uid(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Uids(<<>>, 0, 0, F1, _) ->
    #'Uids'{uid = F1};
dfp_read_field_def_Uids(Other, Z1, Z2, F1,
			TrUserData) ->
    dg_read_field_def_Uids(Other, Z1, Z2, F1, TrUserData).

dg_read_field_def_Uids(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Uids(Rest, N + 7, X bsl N + Acc, F1,
			   TrUserData);
dg_read_field_def_Uids(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Uids_uid(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Uids(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_Uids(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_Uids(Rest, 0, 0, F1, TrUserData);
	    5 -> skip_32_Uids(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_Uids(<<>>, 0, 0, F1, _) ->
    #'Uids'{uid = F1}.

d_field_Uids_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		 TrUserData)
    when N < 57 ->
    d_field_Uids_uid(Rest, N + 7, X bsl N + Acc, F1,
		     TrUserData);
d_field_Uids_uid(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Uids(Rest2, 0, 0, NewFValue,
			    TrUserData).


skip_varint_Uids(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    skip_varint_Uids(Rest, Z1, Z2, F1, TrUserData);
skip_varint_Uids(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_Uids(Rest, Z1, Z2, F1, TrUserData).


skip_length_delimited_Uids(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Uids(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
skip_length_delimited_Uids(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Uids(Rest2, 0, 0, F1, TrUserData).


skip_32_Uids(<<_:32, Rest/binary>>, Z1, Z2, F1,
	     TrUserData) ->
    dfp_read_field_def_Uids(Rest, Z1, Z2, F1, TrUserData).


skip_64_Uids(<<_:64, Rest/binary>>, Z1, Z2, F1,
	     TrUserData) ->
    dfp_read_field_def_Uids(Rest, Z1, Z2, F1, TrUserData).


d_msg_ReportServerInfo(Bin, TrUserData) ->
    dfp_read_field_def_ReportServerInfo(Bin, 0, 0,
					id(<<>>, TrUserData),
					id(<<>>, TrUserData),
					id(<<>>, TrUserData),
					id(<<>>, TrUserData), id(0, TrUserData),
					TrUserData).

dfp_read_field_def_ReportServerInfo(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_ReportServerInfo_serverType(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, TrUserData);
dfp_read_field_def_ReportServerInfo(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_ReportServerInfo_serverID(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData);
dfp_read_field_def_ReportServerInfo(<<26, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_ReportServerInfo_serverURI(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, TrUserData);
dfp_read_field_def_ReportServerInfo(<<34, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_ReportServerInfo_gwcURI(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData);
dfp_read_field_def_ReportServerInfo(<<40, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_ReportServerInfo_max(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, TrUserData);
dfp_read_field_def_ReportServerInfo(<<>>, 0, 0, F1, F2,
				    F3, F4, F5, _) ->
    #'ReportServerInfo'{serverType = F1, serverID = F2,
			serverURI = F3, gwcURI = F4, max = F5};
dfp_read_field_def_ReportServerInfo(Other, Z1, Z2, F1,
				    F2, F3, F4, F5, TrUserData) ->
    dg_read_field_def_ReportServerInfo(Other, Z1, Z2, F1,
				       F2, F3, F4, F5, TrUserData).

dg_read_field_def_ReportServerInfo(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReportServerInfo(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5,
				       TrUserData);
dg_read_field_def_ReportServerInfo(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ReportServerInfo_serverType(Rest, 0, 0, F1, F2,
					      F3, F4, F5, TrUserData);
      18 ->
	  d_field_ReportServerInfo_serverID(Rest, 0, 0, F1, F2,
					    F3, F4, F5, TrUserData);
      26 ->
	  d_field_ReportServerInfo_serverURI(Rest, 0, 0, F1, F2,
					     F3, F4, F5, TrUserData);
      34 ->
	  d_field_ReportServerInfo_gwcURI(Rest, 0, 0, F1, F2, F3,
					  F4, F5, TrUserData);
      40 ->
	  d_field_ReportServerInfo_max(Rest, 0, 0, F1, F2, F3, F4,
				       F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReportServerInfo(Rest, 0, 0, F1, F2, F3, F4,
					     F5, TrUserData);
	    1 ->
		skip_64_ReportServerInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
					 TrUserData);
	    2 ->
		skip_length_delimited_ReportServerInfo(Rest, 0, 0, F1,
						       F2, F3, F4, F5,
						       TrUserData);
	    5 ->
		skip_32_ReportServerInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
					 TrUserData)
	  end
    end;
dg_read_field_def_ReportServerInfo(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, _) ->
    #'ReportServerInfo'{serverType = F1, serverID = F2,
			serverURI = F3, gwcURI = F4, max = F5}.

d_field_ReportServerInfo_serverType(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_ReportServerInfo_serverType(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5,
					TrUserData);
d_field_ReportServerInfo_serverType(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ReportServerInfo(Rest2, 0, 0,
					NewFValue, F2, F3, F4, F5, TrUserData).


d_field_ReportServerInfo_serverID(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_ReportServerInfo_serverID(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5,
				      TrUserData);
d_field_ReportServerInfo_serverID(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ReportServerInfo(Rest2, 0, 0, F1,
					NewFValue, F3, F4, F5, TrUserData).


d_field_ReportServerInfo_serverURI(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_ReportServerInfo_serverURI(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5,
				       TrUserData);
d_field_ReportServerInfo_serverURI(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, _, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ReportServerInfo(Rest2, 0, 0, F1, F2,
					NewFValue, F4, F5, TrUserData).


d_field_ReportServerInfo_gwcURI(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_ReportServerInfo_gwcURI(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5,
				    TrUserData);
d_field_ReportServerInfo_gwcURI(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, _, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ReportServerInfo(Rest2, 0, 0, F1, F2,
					F3, NewFValue, F5, TrUserData).


d_field_ReportServerInfo_max(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_ReportServerInfo_max(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, TrUserData);
d_field_ReportServerInfo_max(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ReportServerInfo(Rest, 0, 0, F1, F2,
					F3, F4, NewFValue, TrUserData).


skip_varint_ReportServerInfo(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_ReportServerInfo(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, TrUserData);
skip_varint_ReportServerInfo(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_ReportServerInfo(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, TrUserData).


skip_length_delimited_ReportServerInfo(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReportServerInfo(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   TrUserData);
skip_length_delimited_ReportServerInfo(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5,
				       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReportServerInfo(Rest2, 0, 0, F1, F2,
					F3, F4, F5, TrUserData).


skip_32_ReportServerInfo(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_ReportServerInfo(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, TrUserData).


skip_64_ReportServerInfo(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_ReportServerInfo(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, TrUserData).


d_msg_NotifyClose(Bin, TrUserData) ->
    dfp_read_field_def_NotifyClose(Bin, 0, 0,
				   id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_NotifyClose(<<10, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_NotifyClose_uid(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_NotifyClose(<<>>, 0, 0, F1, _) ->
    #'NotifyClose'{uid = F1};
dfp_read_field_def_NotifyClose(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_NotifyClose(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_NotifyClose(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NotifyClose(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_NotifyClose(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_NotifyClose_uid(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NotifyClose(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_NotifyClose(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_NotifyClose(Rest, 0, 0, F1,
						  TrUserData);
	    5 -> skip_32_NotifyClose(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_NotifyClose(<<>>, 0, 0, F1, _) ->
    #'NotifyClose'{uid = F1}.

d_field_NotifyClose_uid(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData)
    when N < 57 ->
    d_field_NotifyClose_uid(Rest, N + 7, X bsl N + Acc, F1,
			    TrUserData);
d_field_NotifyClose_uid(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_NotifyClose(Rest2, 0, 0, NewFValue,
				   TrUserData).


skip_varint_NotifyClose(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_NotifyClose(Rest, Z1, Z2, F1, TrUserData);
skip_varint_NotifyClose(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_NotifyClose(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_NotifyClose(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_NotifyClose(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_NotifyClose(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NotifyClose(Rest2, 0, 0, F1,
				   TrUserData).


skip_32_NotifyClose(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_NotifyClose(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_NotifyClose(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_NotifyClose(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_HeartbeatRes(Bin, TrUserData) ->
    dfp_read_field_def_HeartbeatRes(Bin, 0, 0, TrUserData).

dfp_read_field_def_HeartbeatRes(<<>>, 0, 0, _) ->
    #'HeartbeatRes'{};
dfp_read_field_def_HeartbeatRes(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_HeartbeatRes(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_HeartbeatRes(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_HeartbeatRes(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_HeartbeatRes(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_HeartbeatRes(Rest, 0, 0, TrUserData);
      1 -> skip_64_HeartbeatRes(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_HeartbeatRes(Rest, 0, 0,
					     TrUserData);
      5 -> skip_32_HeartbeatRes(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_HeartbeatRes(<<>>, 0, 0, _) ->
    #'HeartbeatRes'{}.

skip_varint_HeartbeatRes(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_HeartbeatRes(Rest, Z1, Z2, TrUserData);
skip_varint_HeartbeatRes(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_HeartbeatRes(Rest, Z1, Z2,
				    TrUserData).


skip_length_delimited_HeartbeatRes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_HeartbeatRes(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_HeartbeatRes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_HeartbeatRes(Rest2, 0, 0,
				    TrUserData).


skip_32_HeartbeatRes(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_HeartbeatRes(Rest, Z1, Z2,
				    TrUserData).


skip_64_HeartbeatRes(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_HeartbeatRes(Rest, Z1, Z2,
				    TrUserData).


d_msg_TickUser(Bin, TrUserData) ->
    dfp_read_field_def_TickUser(Bin, 0, 0,
				id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_TickUser(<<10, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_TickUser_uid(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_TickUser(<<>>, 0, 0, F1, _) ->
    #'TickUser'{uid = F1};
dfp_read_field_def_TickUser(Other, Z1, Z2, F1,
			    TrUserData) ->
    dg_read_field_def_TickUser(Other, Z1, Z2, F1,
			       TrUserData).

dg_read_field_def_TickUser(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TickUser(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
dg_read_field_def_TickUser(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_TickUser_uid(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_TickUser(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_TickUser(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_TickUser(Rest, 0, 0, F1,
					       TrUserData);
	    5 -> skip_32_TickUser(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_TickUser(<<>>, 0, 0, F1, _) ->
    #'TickUser'{uid = F1}.

d_field_TickUser_uid(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, TrUserData)
    when N < 57 ->
    d_field_TickUser_uid(Rest, N + 7, X bsl N + Acc, F1,
			 TrUserData);
d_field_TickUser_uid(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_TickUser(Rest2, 0, 0, NewFValue,
				TrUserData).


skip_varint_TickUser(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    skip_varint_TickUser(Rest, Z1, Z2, F1, TrUserData);
skip_varint_TickUser(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    dfp_read_field_def_TickUser(Rest, Z1, Z2, F1,
				TrUserData).


skip_length_delimited_TickUser(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_TickUser(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_TickUser(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TickUser(Rest2, 0, 0, F1,
				TrUserData).


skip_32_TickUser(<<_:32, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_TickUser(Rest, Z1, Z2, F1,
				TrUserData).


skip_64_TickUser(<<_:64, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_TickUser(Rest, Z1, Z2, F1,
				TrUserData).


d_msg_HeartbeatReq(Bin, TrUserData) ->
    dfp_read_field_def_HeartbeatReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_HeartbeatReq(<<>>, 0, 0, _) ->
    #'HeartbeatReq'{};
dfp_read_field_def_HeartbeatReq(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_HeartbeatReq(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_HeartbeatReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_HeartbeatReq(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_HeartbeatReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_HeartbeatReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_HeartbeatReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_HeartbeatReq(Rest, 0, 0,
					     TrUserData);
      5 -> skip_32_HeartbeatReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_HeartbeatReq(<<>>, 0, 0, _) ->
    #'HeartbeatReq'{}.

skip_varint_HeartbeatReq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_HeartbeatReq(Rest, Z1, Z2, TrUserData);
skip_varint_HeartbeatReq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_HeartbeatReq(Rest, Z1, Z2,
				    TrUserData).


skip_length_delimited_HeartbeatReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_HeartbeatReq(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_HeartbeatReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_HeartbeatReq(Rest2, 0, 0,
				    TrUserData).


skip_32_HeartbeatReq(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_HeartbeatReq(Rest, Z1, Z2,
				    TrUserData).


skip_64_HeartbeatReq(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_HeartbeatReq(Rest, Z1, Z2,
				    TrUserData).


d_msg_BroadcastByUID(Bin, TrUserData) ->
    dfp_read_field_def_BroadcastByUID(Bin, 0, 0,
				      id([], TrUserData), id(<<>>, TrUserData),
				      TrUserData).

dfp_read_field_def_BroadcastByUID(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_BroadcastByUID_uids(Rest, Z1, Z2, F1, F2,
				TrUserData);
dfp_read_field_def_BroadcastByUID(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_BroadcastByUID_payload(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_BroadcastByUID(<<>>, 0, 0, F1, F2,
				  TrUserData) ->
    #'BroadcastByUID'{uids = lists_reverse(F1, TrUserData),
		      payload = F2};
dfp_read_field_def_BroadcastByUID(Other, Z1, Z2, F1, F2,
				  TrUserData) ->
    dg_read_field_def_BroadcastByUID(Other, Z1, Z2, F1, F2,
				     TrUserData).

dg_read_field_def_BroadcastByUID(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BroadcastByUID(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_BroadcastByUID(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_BroadcastByUID_uids(Rest, 0, 0, F1, F2,
				      TrUserData);
      18 ->
	  d_field_BroadcastByUID_payload(Rest, 0, 0, F1, F2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BroadcastByUID(Rest, 0, 0, F1, F2,
					   TrUserData);
	    1 ->
		skip_64_BroadcastByUID(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_BroadcastByUID(Rest, 0, 0, F1, F2,
						     TrUserData);
	    5 ->
		skip_32_BroadcastByUID(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_BroadcastByUID(<<>>, 0, 0, F1, F2,
				 TrUserData) ->
    #'BroadcastByUID'{uids = lists_reverse(F1, TrUserData),
		      payload = F2}.

d_field_BroadcastByUID_uids(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_BroadcastByUID_uids(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
d_field_BroadcastByUID_uids(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Uids(Bs, TrUserData), TrUserData),
    dfp_read_field_def_BroadcastByUID(Rest2, 0, 0,
				      cons(NewFValue, F1, TrUserData), F2,
				      TrUserData).


d_field_BroadcastByUID_payload(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_BroadcastByUID_payload(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_BroadcastByUID_payload(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_BroadcastByUID(Rest2, 0, 0, F1,
				      NewFValue, TrUserData).


skip_varint_BroadcastByUID(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_BroadcastByUID(Rest, Z1, Z2, F1, F2,
			       TrUserData);
skip_varint_BroadcastByUID(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_BroadcastByUID(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_length_delimited_BroadcastByUID(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_BroadcastByUID(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_BroadcastByUID(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BroadcastByUID(Rest2, 0, 0, F1, F2,
				      TrUserData).


skip_32_BroadcastByUID(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_BroadcastByUID(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_64_BroadcastByUID(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_BroadcastByUID(Rest, Z1, Z2, F1, F2,
				      TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'Broadcast'{} ->
	  merge_msg_Broadcast(Prev, New, TrUserData);
      #'Uids'{} -> merge_msg_Uids(Prev, New, TrUserData);
      #'ReportServerInfo'{} ->
	  merge_msg_ReportServerInfo(Prev, New, TrUserData);
      #'NotifyClose'{} ->
	  merge_msg_NotifyClose(Prev, New, TrUserData);
      #'HeartbeatRes'{} ->
	  merge_msg_HeartbeatRes(Prev, New, TrUserData);
      #'TickUser'{} ->
	  merge_msg_TickUser(Prev, New, TrUserData);
      #'HeartbeatReq'{} ->
	  merge_msg_HeartbeatReq(Prev, New, TrUserData);
      #'BroadcastByUID'{} ->
	  merge_msg_BroadcastByUID(Prev, New, TrUserData)
    end.

merge_msg_Broadcast(#'Broadcast'{serverType =
				     PFserverType,
				 serverID = PFserverID, payload = PFpayload},
		    #'Broadcast'{serverType = NFserverType,
				 serverID = NFserverID, payload = NFpayload},
		    _) ->
    #'Broadcast'{serverType =
		     if NFserverType =:= undefined -> PFserverType;
			true -> NFserverType
		     end,
		 serverID =
		     if NFserverID =:= undefined -> PFserverID;
			true -> NFserverID
		     end,
		 payload =
		     if NFpayload =:= undefined -> PFpayload;
			true -> NFpayload
		     end}.

merge_msg_Uids(#'Uids'{uid = PFuid},
	       #'Uids'{uid = NFuid}, _) ->
    #'Uids'{uid =
		if NFuid =:= undefined -> PFuid;
		   true -> NFuid
		end}.

merge_msg_ReportServerInfo(#'ReportServerInfo'{serverType
						   = PFserverType,
					       serverID = PFserverID,
					       serverURI = PFserverURI,
					       gwcURI = PFgwcURI, max = PFmax},
			   #'ReportServerInfo'{serverType = NFserverType,
					       serverID = NFserverID,
					       serverURI = NFserverURI,
					       gwcURI = NFgwcURI, max = NFmax},
			   _) ->
    #'ReportServerInfo'{serverType =
			    if NFserverType =:= undefined -> PFserverType;
			       true -> NFserverType
			    end,
			serverID =
			    if NFserverID =:= undefined -> PFserverID;
			       true -> NFserverID
			    end,
			serverURI =
			    if NFserverURI =:= undefined -> PFserverURI;
			       true -> NFserverURI
			    end,
			gwcURI =
			    if NFgwcURI =:= undefined -> PFgwcURI;
			       true -> NFgwcURI
			    end,
			max =
			    if NFmax =:= undefined -> PFmax;
			       true -> NFmax
			    end}.

merge_msg_NotifyClose(#'NotifyClose'{uid = PFuid},
		      #'NotifyClose'{uid = NFuid}, _) ->
    #'NotifyClose'{uid =
		       if NFuid =:= undefined -> PFuid;
			  true -> NFuid
		       end}.

merge_msg_HeartbeatRes(_Prev, New, _TrUserData) -> New.

merge_msg_TickUser(#'TickUser'{uid = PFuid},
		   #'TickUser'{uid = NFuid}, _) ->
    #'TickUser'{uid =
		    if NFuid =:= undefined -> PFuid;
		       true -> NFuid
		    end}.

merge_msg_HeartbeatReq(_Prev, New, _TrUserData) -> New.

merge_msg_BroadcastByUID(#'BroadcastByUID'{uids =
					       PFuids,
					   payload = PFpayload},
			 #'BroadcastByUID'{uids = NFuids, payload = NFpayload},
			 TrUserData) ->
    #'BroadcastByUID'{uids =
			  'erlang_++'(PFuids, NFuids, TrUserData),
		      payload =
			  if NFpayload =:= undefined -> PFpayload;
			     true -> NFpayload
			  end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Broadcast'{} ->
	  v_msg_Broadcast(Msg, ['Broadcast'], TrUserData);
      #'Uids'{} -> v_msg_Uids(Msg, ['Uids'], TrUserData);
      #'ReportServerInfo'{} ->
	  v_msg_ReportServerInfo(Msg, ['ReportServerInfo'],
				 TrUserData);
      #'NotifyClose'{} ->
	  v_msg_NotifyClose(Msg, ['NotifyClose'], TrUserData);
      #'HeartbeatRes'{} ->
	  v_msg_HeartbeatRes(Msg, ['HeartbeatRes'], TrUserData);
      #'TickUser'{} ->
	  v_msg_TickUser(Msg, ['TickUser'], TrUserData);
      #'HeartbeatReq'{} ->
	  v_msg_HeartbeatReq(Msg, ['HeartbeatReq'], TrUserData);
      #'BroadcastByUID'{} ->
	  v_msg_BroadcastByUID(Msg, ['BroadcastByUID'],
			       TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Broadcast/3}).
v_msg_Broadcast(#'Broadcast'{serverType = F1,
			     serverID = F2, payload = F3},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [serverType | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [serverID | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [payload | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Uids/3}).
v_msg_Uids(#'Uids'{uid = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [uid | Path])
    end,
    ok;
v_msg_Uids(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Uids'}, X, Path).

-dialyzer({nowarn_function,v_msg_ReportServerInfo/3}).
v_msg_ReportServerInfo(#'ReportServerInfo'{serverType =
					       F1,
					   serverID = F2, serverURI = F3,
					   gwcURI = F4, max = F5},
		       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [serverType | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [serverID | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [serverURI | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [gwcURI | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [max | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_NotifyClose/3}).
v_msg_NotifyClose(#'NotifyClose'{uid = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [uid | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_HeartbeatRes/3}).
v_msg_HeartbeatRes(#'HeartbeatRes'{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_TickUser/3}).
v_msg_TickUser(#'TickUser'{uid = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [uid | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_HeartbeatReq/3}).
v_msg_HeartbeatReq(#'HeartbeatReq'{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_BroadcastByUID/3}).
v_msg_BroadcastByUID(#'BroadcastByUID'{uids = F1,
				       payload = F2},
		     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Uids(Elem, [uids | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Uids'}}, F1,
			 Path)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [payload | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{msg, 'Broadcast'},
      [#field{name = serverType, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = serverID, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = payload, fnum = 3, rnum = 4, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'Uids'},
      [#field{name = uid, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'ReportServerInfo'},
      [#field{name = serverType, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = serverID, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = serverURI, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = gwcURI, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = max, fnum = 5, rnum = 6, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'NotifyClose'},
      [#field{name = uid, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'HeartbeatRes'}, []},
     {{msg, 'TickUser'},
      [#field{name = uid, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'HeartbeatReq'}, []},
     {{msg, 'BroadcastByUID'},
      [#field{name = uids, fnum = 1, rnum = 2,
	      type = {msg, 'Uids'}, occurrence = repeated, opts = []},
       #field{name = payload, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['Broadcast', 'Uids', 'ReportServerInfo', 'NotifyClose',
     'HeartbeatRes', 'TickUser', 'HeartbeatReq',
     'BroadcastByUID'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Broadcast') ->
    [#field{name = serverType, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = serverID, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = payload, fnum = 3, rnum = 4, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('Uids') ->
    [#field{name = uid, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('ReportServerInfo') ->
    [#field{name = serverType, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = serverID, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = serverURI, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = gwcURI, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = max, fnum = 5, rnum = 6, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('NotifyClose') ->
    [#field{name = uid, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('HeartbeatRes') -> [];
find_msg_def('TickUser') ->
    [#field{name = uid, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('HeartbeatReq') -> [];
find_msg_def('BroadcastByUID') ->
    [#field{name = uids, fnum = 1, rnum = 2,
	    type = {msg, 'Uids'}, occurrence = repeated, opts = []},
     #field{name = payload, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'GWC'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
