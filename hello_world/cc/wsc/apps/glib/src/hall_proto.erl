%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(hall_proto).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("hall_proto.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'Game'() :: #'Game'{}.
-type 'ChangeUserIconRes'() :: #'ChangeUserIconRes'{}.
-type 'CommonStatus'() :: #'CommonStatus'{}.
-type 'GameListRes'() :: #'GameListRes'{}.
-type 'ChangeUserIconReq'() :: #'ChangeUserIconReq'{}.
-type 'GameListReq'() :: #'GameListReq'{}.
-type 'Msg'() :: #'Msg'{}.
-type 'VerifyRes'() :: #'VerifyRes'{}.
-type 'VerifyReq'() :: #'VerifyReq'{}.
-export_type(['Game'/0, 'ChangeUserIconRes'/0, 'CommonStatus'/0, 'GameListRes'/0, 'ChangeUserIconReq'/0, 'GameListReq'/0, 'Msg'/0, 'VerifyRes'/0, 'VerifyReq'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Game'{} -> e_msg_Game(Msg, TrUserData);
      #'ChangeUserIconRes'{} ->
	  e_msg_ChangeUserIconRes(Msg, TrUserData);
      #'CommonStatus'{} ->
	  e_msg_CommonStatus(Msg, TrUserData);
      #'GameListRes'{} -> e_msg_GameListRes(Msg, TrUserData);
      #'ChangeUserIconReq'{} ->
	  e_msg_ChangeUserIconReq(Msg, TrUserData);
      #'GameListReq'{} -> e_msg_GameListReq(Msg, TrUserData);
      #'Msg'{} -> e_msg_Msg(Msg, TrUserData);
      #'VerifyRes'{} -> e_msg_VerifyRes(Msg, TrUserData);
      #'VerifyReq'{} -> e_msg_VerifyReq(Msg, TrUserData)
    end.



e_msg_Game(Msg, TrUserData) ->
    e_msg_Game(Msg, <<>>, TrUserData).


e_msg_Game(#'Game'{id = F1, name = F2, intro = F3,
		   config = F4, game_screen = F5, introduce = F6,
		   pic_small = F7, pic_big = F8, flag = F9},
	   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case iolist_size(TrF3) of
		    0 -> B2;
		    _ -> e_type_string(TrF3, <<B2/binary, 26>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case iolist_size(TrF4) of
		    0 -> B3;
		    _ -> e_type_string(TrF4, <<B3/binary, 34>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_type_int32(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  case iolist_size(TrF6) of
		    0 -> B5;
		    _ -> e_type_string(TrF6, <<B5/binary, 50>>)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  case iolist_size(TrF7) of
		    0 -> B6;
		    _ -> e_type_string(TrF7, <<B6/binary, 58>>)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  case iolist_size(TrF8) of
		    0 -> B7;
		    _ -> e_type_string(TrF8, <<B7/binary, 66>>)
		  end
		end
	 end,
    if F9 == undefined -> B8;
       true ->
	   begin
	     TrF9 = id(F9, TrUserData),
	     if TrF9 =:= 0 -> B8;
		true -> e_type_int32(TrF9, <<B8/binary, 72>>)
	     end
	   end
    end.

e_msg_ChangeUserIconRes(Msg, TrUserData) ->
    e_msg_ChangeUserIconRes(Msg, <<>>, TrUserData).


e_msg_ChangeUserIconRes(#'ChangeUserIconRes'{code = F1,
					     uid = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case iolist_size(TrF2) of
	       0 -> B1;
	       _ -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_CommonStatus(Msg, TrUserData) ->
    e_msg_CommonStatus(Msg, <<>>, TrUserData).


e_msg_CommonStatus(#'CommonStatus'{code = F1, msg = F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case iolist_size(TrF2) of
	       0 -> B1;
	       _ -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_GameListRes(Msg, TrUserData) ->
    e_msg_GameListRes(Msg, <<>>, TrUserData).


e_msg_GameListRes(#'GameListRes'{gameList = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GameListRes_gameList(TrF1, Bin, TrUserData)
      end
    end.

e_msg_ChangeUserIconReq(Msg, TrUserData) ->
    e_msg_ChangeUserIconReq(Msg, <<>>, TrUserData).


e_msg_ChangeUserIconReq(#'ChangeUserIconReq'{head_id =
						 F1},
			Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_type_int32(TrF1, <<Bin/binary, 16>>)
	     end
	   end
    end.

e_msg_GameListReq(Msg, TrUserData) ->
    e_msg_GameListReq(Msg, <<>>, TrUserData).


e_msg_GameListReq(#'GameListReq'{channel_id = F1}, Bin,
		  TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_Msg(Msg, TrUserData) ->
    e_msg_Msg(Msg, <<>>, TrUserData).


e_msg_Msg(#'Msg'{action = F1, msgBody = F2}, Bin,
	  TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= <<>> -> B1;
		true -> e_type_bytes(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_VerifyRes(Msg, TrUserData) ->
    e_msg_VerifyRes(Msg, <<>>, TrUserData).


e_msg_VerifyRes(#'VerifyRes'{id = F1, username = F2,
			     nickname = F3, channel_id = F4, platform = F5,
			     icon = F6, gold = F7, valid_gold = F8,
			     create_time = F9, invite_code = F10},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case iolist_size(TrF3) of
		    0 -> B2;
		    _ -> e_type_string(TrF3, <<B2/binary, 26>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case iolist_size(TrF4) of
		    0 -> B3;
		    _ -> e_type_string(TrF4, <<B3/binary, 34>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case iolist_size(TrF5) of
		    0 -> B4;
		    _ -> e_type_string(TrF5, <<B4/binary, 42>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  case iolist_size(TrF6) of
		    0 -> B5;
		    _ -> e_type_string(TrF6, <<B5/binary, 50>>)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0.0 -> B6;
		     true -> e_type_float(TrF7, <<B6/binary, 61>>)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0.0 -> B7;
		     true -> e_type_float(TrF8, <<B7/binary, 69>>)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  case iolist_size(TrF9) of
		    0 -> B8;
		    _ -> e_type_string(TrF9, <<B8/binary, 74>>)
		  end
		end
	 end,
    if F10 == undefined -> B9;
       true ->
	   begin
	     TrF10 = id(F10, TrUserData),
	     case iolist_size(TrF10) of
	       0 -> B9;
	       _ -> e_type_string(TrF10, <<B9/binary, 82>>)
	     end
	   end
    end.

e_msg_VerifyReq(Msg, TrUserData) ->
    e_msg_VerifyReq(Msg, <<>>, TrUserData).


e_msg_VerifyReq(#'VerifyReq'{identity = F1,
			     channel_id = F2},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case iolist_size(TrF2) of
	       0 -> B1;
	       _ -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_mfield_GameListRes_gameList(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Game(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GameListRes_gameList([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GameListRes_gameList(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_GameListRes_gameList(Rest, Bin3, TrUserData);
e_field_GameListRes_gameList([], Bin, _TrUserData) ->
    Bin.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_type_float(V, Bin) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin) ->
    <<Bin/binary, 0:16, 192, 127>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Game' -> d_msg_Game(Bin, TrUserData);
      'ChangeUserIconRes' ->
	  d_msg_ChangeUserIconRes(Bin, TrUserData);
      'CommonStatus' -> d_msg_CommonStatus(Bin, TrUserData);
      'GameListRes' -> d_msg_GameListRes(Bin, TrUserData);
      'ChangeUserIconReq' ->
	  d_msg_ChangeUserIconReq(Bin, TrUserData);
      'GameListReq' -> d_msg_GameListReq(Bin, TrUserData);
      'Msg' -> d_msg_Msg(Bin, TrUserData);
      'VerifyRes' -> d_msg_VerifyRes(Bin, TrUserData);
      'VerifyReq' -> d_msg_VerifyReq(Bin, TrUserData)
    end.



d_msg_Game(Bin, TrUserData) ->
    dfp_read_field_def_Game(Bin, 0, 0, id(0, TrUserData),
			    id(<<>>, TrUserData), id(<<>>, TrUserData),
			    id(<<>>, TrUserData), id(0, TrUserData),
			    id(<<>>, TrUserData), id(<<>>, TrUserData),
			    id(<<>>, TrUserData), id(0, TrUserData),
			    TrUserData).

dfp_read_field_def_Game(<<8, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Game_id(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		    F7, F8, F9, TrUserData);
dfp_read_field_def_Game(<<18, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Game_name(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      F7, F8, F9, TrUserData);
dfp_read_field_def_Game(<<26, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Game_intro(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		       F7, F8, F9, TrUserData);
dfp_read_field_def_Game(<<34, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Game_config(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Game(<<40, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Game_game_screen(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Game(<<50, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Game_introduce(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Game(<<58, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Game_pic_small(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Game(<<66, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Game_pic_big(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Game(<<72, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Game_flag(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      F7, F8, F9, TrUserData);
dfp_read_field_def_Game(<<>>, 0, 0, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, _) ->
    #'Game'{id = F1, name = F2, intro = F3, config = F4,
	    game_screen = F5, introduce = F6, pic_small = F7,
	    pic_big = F8, flag = F9};
dfp_read_field_def_Game(Other, Z1, Z2, F1, F2, F3, F4,
			F5, F6, F7, F8, F9, TrUserData) ->
    dg_read_field_def_Game(Other, Z1, Z2, F1, F2, F3, F4,
			   F5, F6, F7, F8, F9, TrUserData).

dg_read_field_def_Game(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Game(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
dg_read_field_def_Game(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Game_id(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
			  F8, F9, TrUserData);
      18 ->
	  d_field_Game_name(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			    F7, F8, F9, TrUserData);
      26 ->
	  d_field_Game_intro(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			     F7, F8, F9, TrUserData);
      34 ->
	  d_field_Game_config(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      F7, F8, F9, TrUserData);
      40 ->
	  d_field_Game_game_screen(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, TrUserData);
      50 ->
	  d_field_Game_introduce(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, TrUserData);
      58 ->
	  d_field_Game_pic_small(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, TrUserData);
      66 ->
	  d_field_Game_pic_big(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9, TrUserData);
      72 ->
	  d_field_Game_flag(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			    F7, F8, F9, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Game(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 F8, F9, TrUserData);
	    1 ->
		skip_64_Game(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7, F8,
			     F9, TrUserData);
	    2 ->
		skip_length_delimited_Game(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, TrUserData);
	    5 ->
		skip_32_Game(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7, F8,
			     F9, TrUserData)
	  end
    end;
dg_read_field_def_Game(<<>>, 0, 0, F1, F2, F3, F4, F5,
		       F6, F7, F8, F9, _) ->
    #'Game'{id = F1, name = F2, intro = F3, config = F4,
	    game_screen = F5, introduce = F6, pic_small = F7,
	    pic_big = F8, flag = F9}.

d_field_Game_id(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Game_id(Rest, N + 7, X bsl N + Acc, F1, F2, F3,
		    F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Game_id(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Game(Rest, 0, 0, NewFValue, F2, F3,
			    F4, F5, F6, F7, F8, F9, TrUserData).


d_field_Game_name(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Game_name(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Game_name(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  _, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Game(Rest2, 0, 0, F1, NewFValue, F3,
			    F4, F5, F6, F7, F8, F9, TrUserData).


d_field_Game_intro(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Game_intro(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Game_intro(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, _, F4, F5, F6, F7, F8, F9, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Game(Rest2, 0, 0, F1, F2, NewFValue,
			    F4, F5, F6, F7, F8, F9, TrUserData).


d_field_Game_config(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Game_config(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Game_config(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, _, F5, F6, F7, F8, F9, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Game(Rest2, 0, 0, F1, F2, F3,
			    NewFValue, F5, F6, F7, F8, F9, TrUserData).


d_field_Game_game_screen(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Game_game_screen(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Game_game_screen(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Game(Rest, 0, 0, F1, F2, F3, F4,
			    NewFValue, F6, F7, F8, F9, TrUserData).


d_field_Game_introduce(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Game_introduce(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Game_introduce(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Game(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    NewFValue, F7, F8, F9, TrUserData).


d_field_Game_pic_small(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Game_pic_small(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Game_pic_small(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Game(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, NewFValue, F8, F9, TrUserData).


d_field_Game_pic_big(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Game_pic_big(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Game_pic_big(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, _, F9, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Game(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, NewFValue, F9, TrUserData).


d_field_Game_flag(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Game_flag(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Game_flag(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Game(Rest, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, NewFValue, TrUserData).


skip_varint_Game(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    skip_varint_Game(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		     F7, F8, F9, TrUserData);
skip_varint_Game(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    dfp_read_field_def_Game(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, TrUserData).


skip_length_delimited_Game(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    skip_length_delimited_Game(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
skip_length_delimited_Game(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Game(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, TrUserData).


skip_32_Game(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5, F6, F7, F8, F9, TrUserData) ->
    dfp_read_field_def_Game(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, TrUserData).


skip_64_Game(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5, F6, F7, F8, F9, TrUserData) ->
    dfp_read_field_def_Game(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, TrUserData).


d_msg_ChangeUserIconRes(Bin, TrUserData) ->
    dfp_read_field_def_ChangeUserIconRes(Bin, 0, 0,
					 id(0, TrUserData),
					 id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_ChangeUserIconRes(<<8, Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_ChangeUserIconRes_code(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_ChangeUserIconRes(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_ChangeUserIconRes_uid(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_ChangeUserIconRes(<<>>, 0, 0, F1, F2,
				     _) ->
    #'ChangeUserIconRes'{code = F1, uid = F2};
dfp_read_field_def_ChangeUserIconRes(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    dg_read_field_def_ChangeUserIconRes(Other, Z1, Z2, F1,
					F2, TrUserData).

dg_read_field_def_ChangeUserIconRes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ChangeUserIconRes(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_ChangeUserIconRes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ChangeUserIconRes_code(Rest, 0, 0, F1, F2,
					 TrUserData);
      18 ->
	  d_field_ChangeUserIconRes_uid(Rest, 0, 0, F1, F2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ChangeUserIconRes(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		skip_64_ChangeUserIconRes(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		skip_length_delimited_ChangeUserIconRes(Rest, 0, 0, F1,
							F2, TrUserData);
	    5 ->
		skip_32_ChangeUserIconRes(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
dg_read_field_def_ChangeUserIconRes(<<>>, 0, 0, F1, F2,
				    _) ->
    #'ChangeUserIconRes'{code = F1, uid = F2}.

d_field_ChangeUserIconRes_code(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ChangeUserIconRes_code(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_ChangeUserIconRes_code(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ChangeUserIconRes(Rest, 0, 0,
					 NewFValue, F2, TrUserData).


d_field_ChangeUserIconRes_uid(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ChangeUserIconRes_uid(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_ChangeUserIconRes_uid(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ChangeUserIconRes(Rest2, 0, 0, F1,
					 NewFValue, TrUserData).


skip_varint_ChangeUserIconRes(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_ChangeUserIconRes(Rest, Z1, Z2, F1, F2,
				  TrUserData);
skip_varint_ChangeUserIconRes(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_ChangeUserIconRes(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_length_delimited_ChangeUserIconRes(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ChangeUserIconRes(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_ChangeUserIconRes(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ChangeUserIconRes(Rest2, 0, 0, F1,
					 F2, TrUserData).


skip_32_ChangeUserIconRes(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_ChangeUserIconRes(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_64_ChangeUserIconRes(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_ChangeUserIconRes(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_CommonStatus(Bin, TrUserData) ->
    dfp_read_field_def_CommonStatus(Bin, 0, 0,
				    id(0, TrUserData), id(<<>>, TrUserData),
				    TrUserData).

dfp_read_field_def_CommonStatus(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_CommonStatus_code(Rest, Z1, Z2, F1, F2,
			      TrUserData);
dfp_read_field_def_CommonStatus(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_CommonStatus_msg(Rest, Z1, Z2, F1, F2,
			     TrUserData);
dfp_read_field_def_CommonStatus(<<>>, 0, 0, F1, F2,
				_) ->
    #'CommonStatus'{code = F1, msg = F2};
dfp_read_field_def_CommonStatus(Other, Z1, Z2, F1, F2,
				TrUserData) ->
    dg_read_field_def_CommonStatus(Other, Z1, Z2, F1, F2,
				   TrUserData).

dg_read_field_def_CommonStatus(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CommonStatus(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_CommonStatus(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CommonStatus_code(Rest, 0, 0, F1, F2,
				    TrUserData);
      18 ->
	  d_field_CommonStatus_msg(Rest, 0, 0, F1, F2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CommonStatus(Rest, 0, 0, F1, F2,
					 TrUserData);
	    1 ->
		skip_64_CommonStatus(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_CommonStatus(Rest, 0, 0, F1, F2,
						   TrUserData);
	    5 ->
		skip_32_CommonStatus(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_CommonStatus(<<>>, 0, 0, F1, F2, _) ->
    #'CommonStatus'{code = F1, msg = F2}.

d_field_CommonStatus_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_CommonStatus_code(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
d_field_CommonStatus_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CommonStatus(Rest, 0, 0, NewFValue,
				    F2, TrUserData).


d_field_CommonStatus_msg(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_CommonStatus_msg(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
d_field_CommonStatus_msg(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CommonStatus(Rest2, 0, 0, F1,
				    NewFValue, TrUserData).


skip_varint_CommonStatus(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    skip_varint_CommonStatus(Rest, Z1, Z2, F1, F2,
			     TrUserData);
skip_varint_CommonStatus(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_CommonStatus(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_length_delimited_CommonStatus(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_CommonStatus(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_CommonStatus(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommonStatus(Rest2, 0, 0, F1, F2,
				    TrUserData).


skip_32_CommonStatus(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_CommonStatus(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_64_CommonStatus(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_CommonStatus(Rest, Z1, Z2, F1, F2,
				    TrUserData).


d_msg_GameListRes(Bin, TrUserData) ->
    dfp_read_field_def_GameListRes(Bin, 0, 0,
				   id([], TrUserData), TrUserData).

dfp_read_field_def_GameListRes(<<10, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_GameListRes_gameList(Rest, Z1, Z2, F1,
				 TrUserData);
dfp_read_field_def_GameListRes(<<>>, 0, 0, F1,
			       TrUserData) ->
    #'GameListRes'{gameList =
		       lists_reverse(F1, TrUserData)};
dfp_read_field_def_GameListRes(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_GameListRes(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_GameListRes(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GameListRes(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GameListRes(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GameListRes_gameList(Rest, 0, 0, F1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GameListRes(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_GameListRes(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GameListRes(Rest, 0, 0, F1,
						  TrUserData);
	    5 -> skip_32_GameListRes(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GameListRes(<<>>, 0, 0, F1,
			      TrUserData) ->
    #'GameListRes'{gameList =
		       lists_reverse(F1, TrUserData)}.

d_field_GameListRes_gameList(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GameListRes_gameList(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
d_field_GameListRes_gameList(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Game(Bs, TrUserData), TrUserData),
    dfp_read_field_def_GameListRes(Rest2, 0, 0,
				   cons(NewFValue, F1, TrUserData), TrUserData).


skip_varint_GameListRes(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_GameListRes(Rest, Z1, Z2, F1, TrUserData);
skip_varint_GameListRes(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_GameListRes(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_GameListRes(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GameListRes(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GameListRes(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GameListRes(Rest2, 0, 0, F1,
				   TrUserData).


skip_32_GameListRes(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_GameListRes(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_GameListRes(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_GameListRes(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_ChangeUserIconReq(Bin, TrUserData) ->
    dfp_read_field_def_ChangeUserIconReq(Bin, 0, 0,
					 id(0, TrUserData), TrUserData).

dfp_read_field_def_ChangeUserIconReq(<<16,
				       Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    d_field_ChangeUserIconReq_head_id(Rest, Z1, Z2, F1,
				      TrUserData);
dfp_read_field_def_ChangeUserIconReq(<<>>, 0, 0, F1,
				     _) ->
    #'ChangeUserIconReq'{head_id = F1};
dfp_read_field_def_ChangeUserIconReq(Other, Z1, Z2, F1,
				     TrUserData) ->
    dg_read_field_def_ChangeUserIconReq(Other, Z1, Z2, F1,
					TrUserData).

dg_read_field_def_ChangeUserIconReq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ChangeUserIconReq(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
dg_read_field_def_ChangeUserIconReq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      16 ->
	  d_field_ChangeUserIconReq_head_id(Rest, 0, 0, F1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ChangeUserIconReq(Rest, 0, 0, F1,
					      TrUserData);
	    1 ->
		skip_64_ChangeUserIconReq(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_ChangeUserIconReq(Rest, 0, 0, F1,
							TrUserData);
	    5 ->
		skip_32_ChangeUserIconReq(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_ChangeUserIconReq(<<>>, 0, 0, F1,
				    _) ->
    #'ChangeUserIconReq'{head_id = F1}.

d_field_ChangeUserIconReq_head_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ChangeUserIconReq_head_id(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
d_field_ChangeUserIconReq_head_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ChangeUserIconReq(Rest, 0, 0,
					 NewFValue, TrUserData).


skip_varint_ChangeUserIconReq(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    skip_varint_ChangeUserIconReq(Rest, Z1, Z2, F1,
				  TrUserData);
skip_varint_ChangeUserIconReq(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ChangeUserIconReq(Rest, Z1, Z2, F1,
					 TrUserData).


skip_length_delimited_ChangeUserIconReq(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ChangeUserIconReq(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_ChangeUserIconReq(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ChangeUserIconReq(Rest2, 0, 0, F1,
					 TrUserData).


skip_32_ChangeUserIconReq(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_ChangeUserIconReq(Rest, Z1, Z2, F1,
					 TrUserData).


skip_64_ChangeUserIconReq(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_ChangeUserIconReq(Rest, Z1, Z2, F1,
					 TrUserData).


d_msg_GameListReq(Bin, TrUserData) ->
    dfp_read_field_def_GameListReq(Bin, 0, 0,
				   id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_GameListReq(<<10, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_GameListReq_channel_id(Rest, Z1, Z2, F1,
				   TrUserData);
dfp_read_field_def_GameListReq(<<>>, 0, 0, F1, _) ->
    #'GameListReq'{channel_id = F1};
dfp_read_field_def_GameListReq(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_GameListReq(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_GameListReq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GameListReq(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GameListReq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GameListReq_channel_id(Rest, 0, 0, F1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GameListReq(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_GameListReq(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GameListReq(Rest, 0, 0, F1,
						  TrUserData);
	    5 -> skip_32_GameListReq(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GameListReq(<<>>, 0, 0, F1, _) ->
    #'GameListReq'{channel_id = F1}.

d_field_GameListReq_channel_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GameListReq_channel_id(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
d_field_GameListReq_channel_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GameListReq(Rest2, 0, 0, NewFValue,
				   TrUserData).


skip_varint_GameListReq(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_GameListReq(Rest, Z1, Z2, F1, TrUserData);
skip_varint_GameListReq(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_GameListReq(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_GameListReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GameListReq(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GameListReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GameListReq(Rest2, 0, 0, F1,
				   TrUserData).


skip_32_GameListReq(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_GameListReq(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_GameListReq(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_GameListReq(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_Msg(Bin, TrUserData) ->
    dfp_read_field_def_Msg(Bin, 0, 0, id(0, TrUserData),
			   id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_Msg(<<8, Rest/binary>>, Z1, Z2, F1,
		       F2, TrUserData) ->
    d_field_Msg_action(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Msg(<<18, Rest/binary>>, Z1, Z2, F1,
		       F2, TrUserData) ->
    d_field_Msg_msgBody(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Msg(<<>>, 0, 0, F1, F2, _) ->
    #'Msg'{action = F1, msgBody = F2};
dfp_read_field_def_Msg(Other, Z1, Z2, F1, F2,
		       TrUserData) ->
    dg_read_field_def_Msg(Other, Z1, Z2, F1, F2,
			  TrUserData).

dg_read_field_def_Msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Msg(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
dg_read_field_def_Msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_Msg_action(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_Msg_msgBody(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Msg(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Msg(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Msg(Rest, 0, 0, F1, F2,
					  TrUserData);
	    5 -> skip_32_Msg(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Msg(<<>>, 0, 0, F1, F2, _) ->
    #'Msg'{action = F1, msgBody = F2}.

d_field_Msg_action(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, TrUserData)
    when N < 57 ->
    d_field_Msg_action(Rest, N + 7, X bsl N + Acc, F1, F2,
		       TrUserData);
d_field_Msg_action(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F2, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Msg(Rest, 0, 0, NewFValue, F2,
			   TrUserData).


d_field_Msg_msgBody(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, TrUserData)
    when N < 57 ->
    d_field_Msg_msgBody(Rest, N + 7, X bsl N + Acc, F1, F2,
			TrUserData);
d_field_Msg_msgBody(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Msg(Rest2, 0, 0, F1, NewFValue,
			   TrUserData).


skip_varint_Msg(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, TrUserData) ->
    skip_varint_Msg(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Msg(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, TrUserData) ->
    dfp_read_field_def_Msg(Rest, Z1, Z2, F1, F2,
			   TrUserData).


skip_length_delimited_Msg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Msg(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
skip_length_delimited_Msg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Msg(Rest2, 0, 0, F1, F2, TrUserData).


skip_32_Msg(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	    TrUserData) ->
    dfp_read_field_def_Msg(Rest, Z1, Z2, F1, F2,
			   TrUserData).


skip_64_Msg(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	    TrUserData) ->
    dfp_read_field_def_Msg(Rest, Z1, Z2, F1, F2,
			   TrUserData).


d_msg_VerifyRes(Bin, TrUserData) ->
    dfp_read_field_def_VerifyRes(Bin, 0, 0,
				 id(<<>>, TrUserData), id(<<>>, TrUserData),
				 id(<<>>, TrUserData), id(<<>>, TrUserData),
				 id(<<>>, TrUserData), id(<<>>, TrUserData),
				 id(0.0, TrUserData), id(0.0, TrUserData),
				 id(<<>>, TrUserData), id(<<>>, TrUserData),
				 TrUserData).

dfp_read_field_def_VerifyRes(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    d_field_VerifyRes_id(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_VerifyRes(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    d_field_VerifyRes_username(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_VerifyRes(<<26, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    d_field_VerifyRes_nickname(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_VerifyRes(<<34, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    d_field_VerifyRes_channel_id(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_VerifyRes(<<42, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    d_field_VerifyRes_platform(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_VerifyRes(<<50, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    d_field_VerifyRes_icon(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_VerifyRes(<<61, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    d_field_VerifyRes_gold(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_VerifyRes(<<69, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    d_field_VerifyRes_valid_gold(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_VerifyRes(<<74, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    d_field_VerifyRes_create_time(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_VerifyRes(<<82, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    d_field_VerifyRes_invite_code(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_VerifyRes(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, _) ->
    #'VerifyRes'{id = F1, username = F2, nickname = F3,
		 channel_id = F4, platform = F5, icon = F6, gold = F7,
		 valid_gold = F8, create_time = F9, invite_code = F10};
dfp_read_field_def_VerifyRes(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    dg_read_field_def_VerifyRes(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, TrUserData).

dg_read_field_def_VerifyRes(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_VerifyRes(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				TrUserData);
dg_read_field_def_VerifyRes(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_VerifyRes_id(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9, F10, TrUserData);
      18 ->
	  d_field_VerifyRes_username(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, TrUserData);
      26 ->
	  d_field_VerifyRes_nickname(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, TrUserData);
      34 ->
	  d_field_VerifyRes_channel_id(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, TrUserData);
      42 ->
	  d_field_VerifyRes_platform(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, TrUserData);
      50 ->
	  d_field_VerifyRes_icon(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, TrUserData);
      61 ->
	  d_field_VerifyRes_gold(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, TrUserData);
      69 ->
	  d_field_VerifyRes_valid_gold(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, TrUserData);
      74 ->
	  d_field_VerifyRes_create_time(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10,
					TrUserData);
      82 ->
	  d_field_VerifyRes_invite_code(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_VerifyRes(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, TrUserData);
	    1 ->
		skip_64_VerifyRes(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, F9, F10, TrUserData);
	    2 ->
		skip_length_delimited_VerifyRes(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9, F10,
						TrUserData);
	    5 ->
		skip_32_VerifyRes(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, F9, F10, TrUserData)
	  end
    end;
dg_read_field_def_VerifyRes(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, _) ->
    #'VerifyRes'{id = F1, username = F2, nickname = F3,
		 channel_id = F4, platform = F5, icon = F6, gold = F7,
		 valid_gold = F8, create_time = F9, invite_code = F10}.

d_field_VerifyRes_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, TrUserData)
    when N < 57 ->
    d_field_VerifyRes_id(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9, F10, TrUserData);
d_field_VerifyRes_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F2, F3, F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_VerifyRes(Rest2, 0, 0, NewFValue, F2,
				 F3, F4, F5, F6, F7, F8, F9, F10, TrUserData).


d_field_VerifyRes_username(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			   TrUserData)
    when N < 57 ->
    d_field_VerifyRes_username(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       TrUserData);
d_field_VerifyRes_username(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10,
			   TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_VerifyRes(Rest2, 0, 0, F1, NewFValue,
				 F3, F4, F5, F6, F7, F8, F9, F10, TrUserData).


d_field_VerifyRes_nickname(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			   TrUserData)
    when N < 57 ->
    d_field_VerifyRes_nickname(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       TrUserData);
d_field_VerifyRes_nickname(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10,
			   TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_VerifyRes(Rest2, 0, 0, F1, F2,
				 NewFValue, F4, F5, F6, F7, F8, F9, F10,
				 TrUserData).


d_field_VerifyRes_channel_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData)
    when N < 57 ->
    d_field_VerifyRes_channel_id(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				 TrUserData);
d_field_VerifyRes_channel_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_VerifyRes(Rest2, 0, 0, F1, F2, F3,
				 NewFValue, F5, F6, F7, F8, F9, F10,
				 TrUserData).


d_field_VerifyRes_platform(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			   TrUserData)
    when N < 57 ->
    d_field_VerifyRes_platform(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       TrUserData);
d_field_VerifyRes_platform(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10,
			   TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_VerifyRes(Rest2, 0, 0, F1, F2, F3,
				 F4, NewFValue, F6, F7, F8, F9, F10,
				 TrUserData).


d_field_VerifyRes_icon(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
		       TrUserData)
    when N < 57 ->
    d_field_VerifyRes_icon(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, TrUserData);
d_field_VerifyRes_icon(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10,
		       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_VerifyRes(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, NewFValue, F7, F8, F9, F10,
				 TrUserData).


d_field_VerifyRes_gold(<<0:16, 128, 127, Rest/binary>>,
		       Z1, Z2, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
		       TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, infinity, F8, F9, F10, TrUserData);
d_field_VerifyRes_gold(<<0:16, 128, 255, Rest/binary>>,
		       Z1, Z2, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
		       TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, '-infinity', F8, F9, F10,
				 TrUserData);
d_field_VerifyRes_gold(<<_:16, 1:1, _:7, _:1, 127:7,
			 Rest/binary>>,
		       Z1, Z2, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
		       TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, nan, F8, F9, F10, TrUserData);
d_field_VerifyRes_gold(<<Value:32/little-float,
			 Rest/binary>>,
		       Z1, Z2, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
		       TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, Value, F8, F9, F10, TrUserData).


d_field_VerifyRes_valid_gold(<<0:16, 128, 127,
			       Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, _, F9, F10,
			     TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, infinity, F9, F10, TrUserData);
d_field_VerifyRes_valid_gold(<<0:16, 128, 255,
			       Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, _, F9, F10,
			     TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, '-infinity', F9, F10,
				 TrUserData);
d_field_VerifyRes_valid_gold(<<_:16, 1:1, _:7, _:1,
			       127:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, _, F9, F10,
			     TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, nan, F9, F10, TrUserData);
d_field_VerifyRes_valid_gold(<<Value:32/little-float,
			       Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, _, F9, F10,
			     TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, Value, F9, F10, TrUserData).


d_field_VerifyRes_create_time(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      TrUserData)
    when N < 57 ->
    d_field_VerifyRes_create_time(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, TrUserData);
d_field_VerifyRes_create_time(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
			      TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_VerifyRes(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, NewFValue, F10,
				 TrUserData).


d_field_VerifyRes_invite_code(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      TrUserData)
    when N < 57 ->
    d_field_VerifyRes_invite_code(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, TrUserData);
d_field_VerifyRes_invite_code(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
			      TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_VerifyRes(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, NewFValue, TrUserData).


skip_varint_VerifyRes(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    skip_varint_VerifyRes(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, TrUserData);
skip_varint_VerifyRes(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, TrUserData).


skip_length_delimited_VerifyRes(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				TrUserData)
    when N < 57 ->
    skip_length_delimited_VerifyRes(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, TrUserData);
skip_length_delimited_VerifyRes(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VerifyRes(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, TrUserData).


skip_32_VerifyRes(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, TrUserData).


skip_64_VerifyRes(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, TrUserData).


d_msg_VerifyReq(Bin, TrUserData) ->
    dfp_read_field_def_VerifyReq(Bin, 0, 0,
				 id(<<>>, TrUserData), id(<<>>, TrUserData),
				 TrUserData).

dfp_read_field_def_VerifyReq(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_VerifyReq_identity(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_VerifyReq(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_VerifyReq_channel_id(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_VerifyReq(<<>>, 0, 0, F1, F2, _) ->
    #'VerifyReq'{identity = F1, channel_id = F2};
dfp_read_field_def_VerifyReq(Other, Z1, Z2, F1, F2,
			     TrUserData) ->
    dg_read_field_def_VerifyReq(Other, Z1, Z2, F1, F2,
				TrUserData).

dg_read_field_def_VerifyReq(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_VerifyReq(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
dg_read_field_def_VerifyReq(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_VerifyReq_identity(Rest, 0, 0, F1, F2,
				     TrUserData);
      18 ->
	  d_field_VerifyReq_channel_id(Rest, 0, 0, F1, F2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_VerifyReq(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_VerifyReq(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_VerifyReq(Rest, 0, 0, F1, F2,
						TrUserData);
	    5 -> skip_32_VerifyReq(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_VerifyReq(<<>>, 0, 0, F1, F2, _) ->
    #'VerifyReq'{identity = F1, channel_id = F2}.

d_field_VerifyReq_identity(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_VerifyReq_identity(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_VerifyReq_identity(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_VerifyReq(Rest2, 0, 0, NewFValue, F2,
				 TrUserData).


d_field_VerifyReq_channel_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_VerifyReq_channel_id(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_VerifyReq_channel_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_VerifyReq(Rest2, 0, 0, F1, NewFValue,
				 TrUserData).


skip_varint_VerifyReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    skip_varint_VerifyReq(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_VerifyReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    dfp_read_field_def_VerifyReq(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_length_delimited_VerifyReq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_VerifyReq(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_VerifyReq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VerifyReq(Rest2, 0, 0, F1, F2,
				 TrUserData).


skip_32_VerifyReq(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_VerifyReq(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_64_VerifyReq(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_VerifyReq(Rest, Z1, Z2, F1, F2,
				 TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'Game'{} -> merge_msg_Game(Prev, New, TrUserData);
      #'ChangeUserIconRes'{} ->
	  merge_msg_ChangeUserIconRes(Prev, New, TrUserData);
      #'CommonStatus'{} ->
	  merge_msg_CommonStatus(Prev, New, TrUserData);
      #'GameListRes'{} ->
	  merge_msg_GameListRes(Prev, New, TrUserData);
      #'ChangeUserIconReq'{} ->
	  merge_msg_ChangeUserIconReq(Prev, New, TrUserData);
      #'GameListReq'{} ->
	  merge_msg_GameListReq(Prev, New, TrUserData);
      #'Msg'{} -> merge_msg_Msg(Prev, New, TrUserData);
      #'VerifyRes'{} ->
	  merge_msg_VerifyRes(Prev, New, TrUserData);
      #'VerifyReq'{} ->
	  merge_msg_VerifyReq(Prev, New, TrUserData)
    end.

merge_msg_Game(#'Game'{id = PFid, name = PFname,
		       intro = PFintro, config = PFconfig,
		       game_screen = PFgame_screen, introduce = PFintroduce,
		       pic_small = PFpic_small, pic_big = PFpic_big,
		       flag = PFflag},
	       #'Game'{id = NFid, name = NFname, intro = NFintro,
		       config = NFconfig, game_screen = NFgame_screen,
		       introduce = NFintroduce, pic_small = NFpic_small,
		       pic_big = NFpic_big, flag = NFflag},
	       _) ->
    #'Game'{id =
		if NFid =:= undefined -> PFid;
		   true -> NFid
		end,
	    name =
		if NFname =:= undefined -> PFname;
		   true -> NFname
		end,
	    intro =
		if NFintro =:= undefined -> PFintro;
		   true -> NFintro
		end,
	    config =
		if NFconfig =:= undefined -> PFconfig;
		   true -> NFconfig
		end,
	    game_screen =
		if NFgame_screen =:= undefined -> PFgame_screen;
		   true -> NFgame_screen
		end,
	    introduce =
		if NFintroduce =:= undefined -> PFintroduce;
		   true -> NFintroduce
		end,
	    pic_small =
		if NFpic_small =:= undefined -> PFpic_small;
		   true -> NFpic_small
		end,
	    pic_big =
		if NFpic_big =:= undefined -> PFpic_big;
		   true -> NFpic_big
		end,
	    flag =
		if NFflag =:= undefined -> PFflag;
		   true -> NFflag
		end}.

merge_msg_ChangeUserIconRes(#'ChangeUserIconRes'{code =
						     PFcode,
						 uid = PFuid},
			    #'ChangeUserIconRes'{code = NFcode, uid = NFuid},
			    _) ->
    #'ChangeUserIconRes'{code =
			     if NFcode =:= undefined -> PFcode;
				true -> NFcode
			     end,
			 uid =
			     if NFuid =:= undefined -> PFuid;
				true -> NFuid
			     end}.

merge_msg_CommonStatus(#'CommonStatus'{code = PFcode,
				       msg = PFmsg},
		       #'CommonStatus'{code = NFcode, msg = NFmsg}, _) ->
    #'CommonStatus'{code =
			if NFcode =:= undefined -> PFcode;
			   true -> NFcode
			end,
		    msg =
			if NFmsg =:= undefined -> PFmsg;
			   true -> NFmsg
			end}.

merge_msg_GameListRes(#'GameListRes'{gameList =
					 PFgameList},
		      #'GameListRes'{gameList = NFgameList}, TrUserData) ->
    #'GameListRes'{gameList =
		       'erlang_++'(PFgameList, NFgameList, TrUserData)}.

merge_msg_ChangeUserIconReq(#'ChangeUserIconReq'{head_id
						     = PFhead_id},
			    #'ChangeUserIconReq'{head_id = NFhead_id}, _) ->
    #'ChangeUserIconReq'{head_id =
			     if NFhead_id =:= undefined -> PFhead_id;
				true -> NFhead_id
			     end}.

merge_msg_GameListReq(#'GameListReq'{channel_id =
					 PFchannel_id},
		      #'GameListReq'{channel_id = NFchannel_id}, _) ->
    #'GameListReq'{channel_id =
		       if NFchannel_id =:= undefined -> PFchannel_id;
			  true -> NFchannel_id
		       end}.

merge_msg_Msg(#'Msg'{action = PFaction,
		     msgBody = PFmsgBody},
	      #'Msg'{action = NFaction, msgBody = NFmsgBody}, _) ->
    #'Msg'{action =
	       if NFaction =:= undefined -> PFaction;
		  true -> NFaction
	       end,
	   msgBody =
	       if NFmsgBody =:= undefined -> PFmsgBody;
		  true -> NFmsgBody
	       end}.

merge_msg_VerifyRes(#'VerifyRes'{id = PFid,
				 username = PFusername, nickname = PFnickname,
				 channel_id = PFchannel_id,
				 platform = PFplatform, icon = PFicon,
				 gold = PFgold, valid_gold = PFvalid_gold,
				 create_time = PFcreate_time,
				 invite_code = PFinvite_code},
		    #'VerifyRes'{id = NFid, username = NFusername,
				 nickname = NFnickname,
				 channel_id = NFchannel_id,
				 platform = NFplatform, icon = NFicon,
				 gold = NFgold, valid_gold = NFvalid_gold,
				 create_time = NFcreate_time,
				 invite_code = NFinvite_code},
		    _) ->
    #'VerifyRes'{id =
		     if NFid =:= undefined -> PFid;
			true -> NFid
		     end,
		 username =
		     if NFusername =:= undefined -> PFusername;
			true -> NFusername
		     end,
		 nickname =
		     if NFnickname =:= undefined -> PFnickname;
			true -> NFnickname
		     end,
		 channel_id =
		     if NFchannel_id =:= undefined -> PFchannel_id;
			true -> NFchannel_id
		     end,
		 platform =
		     if NFplatform =:= undefined -> PFplatform;
			true -> NFplatform
		     end,
		 icon =
		     if NFicon =:= undefined -> PFicon;
			true -> NFicon
		     end,
		 gold =
		     if NFgold =:= undefined -> PFgold;
			true -> NFgold
		     end,
		 valid_gold =
		     if NFvalid_gold =:= undefined -> PFvalid_gold;
			true -> NFvalid_gold
		     end,
		 create_time =
		     if NFcreate_time =:= undefined -> PFcreate_time;
			true -> NFcreate_time
		     end,
		 invite_code =
		     if NFinvite_code =:= undefined -> PFinvite_code;
			true -> NFinvite_code
		     end}.

merge_msg_VerifyReq(#'VerifyReq'{identity = PFidentity,
				 channel_id = PFchannel_id},
		    #'VerifyReq'{identity = NFidentity,
				 channel_id = NFchannel_id},
		    _) ->
    #'VerifyReq'{identity =
		     if NFidentity =:= undefined -> PFidentity;
			true -> NFidentity
		     end,
		 channel_id =
		     if NFchannel_id =:= undefined -> PFchannel_id;
			true -> NFchannel_id
		     end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Game'{} -> v_msg_Game(Msg, ['Game'], TrUserData);
      #'ChangeUserIconRes'{} ->
	  v_msg_ChangeUserIconRes(Msg, ['ChangeUserIconRes'],
				  TrUserData);
      #'CommonStatus'{} ->
	  v_msg_CommonStatus(Msg, ['CommonStatus'], TrUserData);
      #'GameListRes'{} ->
	  v_msg_GameListRes(Msg, ['GameListRes'], TrUserData);
      #'ChangeUserIconReq'{} ->
	  v_msg_ChangeUserIconReq(Msg, ['ChangeUserIconReq'],
				  TrUserData);
      #'GameListReq'{} ->
	  v_msg_GameListReq(Msg, ['GameListReq'], TrUserData);
      #'Msg'{} -> v_msg_Msg(Msg, ['Msg'], TrUserData);
      #'VerifyRes'{} ->
	  v_msg_VerifyRes(Msg, ['VerifyRes'], TrUserData);
      #'VerifyReq'{} ->
	  v_msg_VerifyReq(Msg, ['VerifyReq'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Game/3}).
v_msg_Game(#'Game'{id = F1, name = F2, intro = F3,
		   config = F4, game_screen = F5, introduce = F6,
		   pic_small = F7, pic_big = F8, flag = F9},
	   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [intro | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [config | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [game_screen | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [introduce | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [pic_small | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_string(F8, [pic_big | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_int32(F9, [flag | Path])
    end,
    ok;
v_msg_Game(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Game'}, X, Path).

-dialyzer({nowarn_function,v_msg_ChangeUserIconRes/3}).
v_msg_ChangeUserIconRes(#'ChangeUserIconRes'{code = F1,
					     uid = F2},
			Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [uid | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_CommonStatus/3}).
v_msg_CommonStatus(#'CommonStatus'{code = F1, msg = F2},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [msg | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GameListRes/3}).
v_msg_GameListRes(#'GameListRes'{gameList = F1}, Path,
		  TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Game(Elem, [gameList | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Game'}}, F1,
			 Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ChangeUserIconReq/3}).
v_msg_ChangeUserIconReq(#'ChangeUserIconReq'{head_id =
						 F1},
			Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [head_id | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GameListReq/3}).
v_msg_GameListReq(#'GameListReq'{channel_id = F1}, Path,
		  _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [channel_id | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Msg/3}).
v_msg_Msg(#'Msg'{action = F1, msgBody = F2}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [action | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [msgBody | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_VerifyRes/3}).
v_msg_VerifyRes(#'VerifyRes'{id = F1, username = F2,
			     nickname = F3, channel_id = F4, platform = F5,
			     icon = F6, gold = F7, valid_gold = F8,
			     create_time = F9, invite_code = F10},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [username | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [nickname | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [channel_id | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [platform | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [icon | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_float(F7, [gold | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_float(F8, [valid_gold | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [create_time | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_string(F10, [invite_code | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_VerifyReq/3}).
v_msg_VerifyReq(#'VerifyReq'{identity = F1,
			     channel_id = F2},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [identity | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [channel_id | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_float/2}).
v_type_float(N, _Path) when is_float(N) -> ok;
v_type_float(N, _Path) when is_integer(N) -> ok;
v_type_float(infinity, _Path) -> ok;
v_type_float('-infinity', _Path) -> ok;
v_type_float(nan, _Path) -> ok;
v_type_float(X, Path) ->
    mk_type_error(bad_float_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{msg, 'Game'},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = intro, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = config, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = game_screen, fnum = 5, rnum = 6,
	      type = int32, occurrence = optional, opts = []},
       #field{name = introduce, fnum = 6, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = pic_small, fnum = 7, rnum = 8,
	      type = string, occurrence = optional, opts = []},
       #field{name = pic_big, fnum = 8, rnum = 9,
	      type = string, occurrence = optional, opts = []},
       #field{name = flag, fnum = 9, rnum = 10, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'ChangeUserIconRes'},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = uid, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'CommonStatus'},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'GameListRes'},
      [#field{name = gameList, fnum = 1, rnum = 2,
	      type = {msg, 'Game'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'ChangeUserIconReq'},
      [#field{name = head_id, fnum = 2, rnum = 2,
	      type = int32, occurrence = optional, opts = []}]},
     {{msg, 'GameListReq'},
      [#field{name = channel_id, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Msg'},
      [#field{name = action, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = msgBody, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'VerifyRes'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = username, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = nickname, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = channel_id, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = platform, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = icon, fnum = 6, rnum = 7, type = string,
	      occurrence = optional, opts = []},
       #field{name = gold, fnum = 7, rnum = 8, type = float,
	      occurrence = optional, opts = []},
       #field{name = valid_gold, fnum = 8, rnum = 9,
	      type = float, occurrence = optional, opts = []},
       #field{name = create_time, fnum = 9, rnum = 10,
	      type = string, occurrence = optional, opts = []},
       #field{name = invite_code, fnum = 10, rnum = 11,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'VerifyReq'},
      [#field{name = identity, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = channel_id, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['Game', 'ChangeUserIconRes', 'CommonStatus',
     'GameListRes', 'ChangeUserIconReq', 'GameListReq',
     'Msg', 'VerifyRes', 'VerifyReq'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Game') ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = intro, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = config, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = game_screen, fnum = 5, rnum = 6,
	    type = int32, occurrence = optional, opts = []},
     #field{name = introduce, fnum = 6, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = pic_small, fnum = 7, rnum = 8,
	    type = string, occurrence = optional, opts = []},
     #field{name = pic_big, fnum = 8, rnum = 9,
	    type = string, occurrence = optional, opts = []},
     #field{name = flag, fnum = 9, rnum = 10, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('ChangeUserIconRes') ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = uid, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('CommonStatus') ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('GameListRes') ->
    [#field{name = gameList, fnum = 1, rnum = 2,
	    type = {msg, 'Game'}, occurrence = repeated,
	    opts = []}];
find_msg_def('ChangeUserIconReq') ->
    [#field{name = head_id, fnum = 2, rnum = 2,
	    type = int32, occurrence = optional, opts = []}];
find_msg_def('GameListReq') ->
    [#field{name = channel_id, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Msg') ->
    [#field{name = action, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = msgBody, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('VerifyRes') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = username, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = nickname, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = channel_id, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = platform, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = icon, fnum = 6, rnum = 7, type = string,
	    occurrence = optional, opts = []},
     #field{name = gold, fnum = 7, rnum = 8, type = float,
	    occurrence = optional, opts = []},
     #field{name = valid_gold, fnum = 8, rnum = 9,
	    type = float, occurrence = optional, opts = []},
     #field{name = create_time, fnum = 9, rnum = 10,
	    type = string, occurrence = optional, opts = []},
     #field{name = invite_code, fnum = 10, rnum = 11,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('VerifyReq') ->
    [#field{name = identity, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = channel_id, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'HALL'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
